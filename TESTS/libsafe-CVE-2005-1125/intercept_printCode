make[1]: warning: jobserver unavailable: using -j1.  Add `+' to parent make rule.
Replaying input:
Part 1:
Filename:intercept.c
FuncName:strcpy
LineNum:164

VarName:max_size
Part 2:
Filename:intercept.c
FuncName:strcpy
LineNum:166

Done mapping part2

FUNCTION strcpy

BASIC BLOCK entry
%1:	call	XXX XXX XXX XXX llvm.dbg.value 
%2:	call	XXX XXX XXX XXX llvm.dbg.value 
%3:	load	real_memcpy 
%4:	icmp	%3 XXX 
%5:	br	%4 if.then if.end 

BASIC BLOCK if.then
%6:	call	XXX getLibraryFunction 
%7:	bitcast	%6 
%8:	store	%7 real_memcpy 
%9:	br	if.end 

BASIC BLOCK if.end
%10:	load	strcpy.real_strcpy 
%11:	icmp	%10 XXX 
%12:	br	%11 if.then2 if.end4 

BASIC BLOCK if.then2
%13:	call	XXX getLibraryFunction 
%14:	bitcast	%13 
%15:	store	%14 strcpy.real_strcpy 
%16:	br	if.end4 

BASIC BLOCK if.end4
%17:	load	_libsafe_exclude 
%18:	icmp	%17 XXX 
%19:	br	%18 if.end8 if.then6 

BASIC BLOCK if.then6
%20:	load	strcpy.real_strcpy 
%21:	call	dest src %20 
%22:	br	return 

BASIC BLOCK if.end8
%23:	call	dest _libsafe_stackVariableP 
%24:	call	XXX XXX XXX XXX llvm.dbg.value 
%25:	icmp	%23 XXX 
%26:	br	%25 if.end12 if.then10 

BASIC BLOCK if.then10
%27:	load	strcpy.real_strcpy 
%28:	call	dest src %27 
%29:	br	return 

BASIC BLOCK if.end12
%30:	call	src %23 strnlen 
%31:	call	XXX XXX XXX XXX llvm.dbg.value 
%32:	icmp	%30 %23 
%33:	br	%32 if.end16 if.then15 

BASIC BLOCK if.then15
%34:	call	XXX _libsafe_die 
%35:	br	if.end16 

BASIC BLOCK if.end16
%36:	load	real_memcpy 
%37:	add	%30 XXX 
%38:	call	dest src %37 %36 
%39:	br	return 

BASIC BLOCK return
%40:	phi	%21 %28 dest 
%41:	ret	%40 

FUNCTION llvm.dbg.declare

FUNCTION getLibraryFunction

BASIC BLOCK entry
%42:	call	XXX XXX XXX XXX llvm.dbg.value 
%43:	call	XXX funcName dlsym 
%44:	call	XXX XXX XXX XXX llvm.dbg.value 
%45:	icmp	%43 XXX 
%46:	br	%45 if.end if.then 

BASIC BLOCK if.then
%47:	load	stderr 
%48:	call	dlerror 
%49:	call	%47 XXX funcName %48 fprintf 
%50:	call	XXX _exit 
%51:	unreachable	

BASIC BLOCK if.end
%52:	ret	%43 

FUNCTION _libsafe_stackVariableP

FUNCTION strnlen

FUNCTION _libsafe_die

FUNCTION strncpy

BASIC BLOCK entry
%53:	call	XXX XXX XXX XXX llvm.dbg.value 
%54:	call	XXX XXX XXX XXX llvm.dbg.value 
%55:	call	XXX XXX XXX XXX llvm.dbg.value 
%56:	load	strncpy.real_strncpy 
%57:	icmp	%56 XXX 
%58:	br	%57 if.then if.end 

BASIC BLOCK if.then
%59:	call	XXX getLibraryFunction 
%60:	bitcast	%59 
%61:	store	%60 strncpy.real_strncpy 
%62:	br	if.end 

BASIC BLOCK if.end
%63:	load	_libsafe_exclude 
%64:	icmp	%63 XXX 
%65:	br	%64 if.end4 if.then2 

BASIC BLOCK if.then2
%66:	load	strncpy.real_strncpy 
%67:	call	dest src n %66 
%68:	br	return 

BASIC BLOCK if.end4
%69:	call	dest _libsafe_stackVariableP 
%70:	call	XXX XXX XXX XXX llvm.dbg.value 
%71:	icmp	%69 XXX 
%72:	br	%71 if.end8 if.then6 

BASIC BLOCK if.then6
%73:	load	strncpy.real_strncpy 
%74:	call	dest src n %73 
%75:	br	return 

BASIC BLOCK if.end8
%76:	icmp	n %69 
%77:	br	%76 if.end13 land.lhs.true 

BASIC BLOCK land.lhs.true
%78:	call	src %69 strnlen 
%79:	call	XXX XXX XXX XXX llvm.dbg.value 
%80:	icmp	%78 %69 
%81:	br	%80 if.end13 if.then12 

BASIC BLOCK if.then12
%82:	call	XXX _libsafe_die 
%83:	br	if.end13 

BASIC BLOCK if.end13
%84:	load	strncpy.real_strncpy 
%85:	call	dest src n %84 
%86:	br	return 

BASIC BLOCK return
%87:	phi	%67 %74 %85 
%88:	ret	%87 

FUNCTION stpcpy

BASIC BLOCK entry
%89:	call	XXX XXX XXX XXX llvm.dbg.value 
%90:	call	XXX XXX XXX XXX llvm.dbg.value 
%91:	load	real_memcpy 
%92:	icmp	%91 XXX 
%93:	br	%92 if.then if.end 

BASIC BLOCK if.then
%94:	call	XXX getLibraryFunction 
%95:	bitcast	%94 
%96:	store	%95 real_memcpy 
%97:	br	if.end 

BASIC BLOCK if.end
%98:	load	stpcpy.real_stpcpy 
%99:	icmp	%98 XXX 
%100:	br	%99 if.then2 if.end4 

BASIC BLOCK if.then2
%101:	call	XXX getLibraryFunction 
%102:	bitcast	%101 
%103:	store	%102 stpcpy.real_stpcpy 
%104:	br	if.end4 

BASIC BLOCK if.end4
%105:	load	_libsafe_exclude 
%106:	icmp	%105 XXX 
%107:	br	%106 if.end8 if.then6 

BASIC BLOCK if.then6
%108:	load	stpcpy.real_stpcpy 
%109:	call	dest src %108 
%110:	br	return 

BASIC BLOCK if.end8
%111:	call	dest _libsafe_stackVariableP 
%112:	call	XXX XXX XXX XXX llvm.dbg.value 
%113:	icmp	%111 XXX 
%114:	br	%113 if.end12 if.then10 

BASIC BLOCK if.then10
%115:	load	stpcpy.real_stpcpy 
%116:	call	dest src %115 
%117:	br	return 

BASIC BLOCK if.end12
%118:	call	src %111 strnlen 
%119:	call	XXX XXX XXX XXX llvm.dbg.value 
%120:	icmp	%118 %111 
%121:	br	%120 if.end16 if.then15 

BASIC BLOCK if.then15
%122:	call	XXX _libsafe_die 
%123:	br	if.end16 

BASIC BLOCK if.end16
%124:	load	real_memcpy 
%125:	add	%118 XXX 
%126:	call	dest src %125 %124 
%127:	getelementptr	dest %118 
%128:	br	return 

BASIC BLOCK return
%129:	phi	%109 %116 %127 
%130:	ret	%129 

FUNCTION wcscpy

BASIC BLOCK entry
%131:	call	XXX XXX XXX XXX llvm.dbg.value 
%132:	call	XXX XXX XXX XXX llvm.dbg.value 
%133:	load	wcscpy.real_wcscpy 
%134:	icmp	%133 XXX 
%135:	br	%134 if.then if.end 

BASIC BLOCK if.then
%136:	call	XXX getLibraryFunction 
%137:	bitcast	%136 
%138:	store	%137 wcscpy.real_wcscpy 
%139:	br	if.end 

BASIC BLOCK if.end
%140:	load	_libsafe_exclude 
%141:	icmp	%140 XXX 
%142:	br	%141 if.end4 if.then2 

BASIC BLOCK if.then2
%143:	load	wcscpy.real_wcscpy 
%144:	call	dest src %143 
%145:	br	return 

BASIC BLOCK if.end4
%146:	bitcast	dest 
%147:	call	%146 _libsafe_stackVariableP 
%148:	call	XXX XXX XXX XXX llvm.dbg.value 
%149:	icmp	%147 XXX 
%150:	br	%149 if.end8 if.then6 

BASIC BLOCK if.then6
%151:	load	wcscpy.real_wcscpy 
%152:	call	dest src %151 
%153:	br	return 

BASIC BLOCK if.end8
%154:	udiv	%147 XXX 
%155:	call	XXX XXX XXX XXX llvm.dbg.value 
%156:	call	src %154 wcsnlen 
%157:	call	XXX XXX XXX XXX llvm.dbg.value 
%158:	icmp	%156 %154 
%159:	br	%158 if.end12 if.then11 

BASIC BLOCK if.then11
%160:	call	XXX _libsafe_die 
%161:	br	if.end12 

BASIC BLOCK if.end12
%162:	load	wcscpy.real_wcscpy 
%163:	call	dest src %162 
%164:	br	return 

BASIC BLOCK return
%165:	phi	%144 %152 %163 
%166:	ret	%165 

FUNCTION wcsnlen

FUNCTION wcpcpy

BASIC BLOCK entry
%167:	call	XXX XXX XXX XXX llvm.dbg.value 
%168:	call	XXX XXX XXX XXX llvm.dbg.value 
%169:	load	wcpcpy.real_wcpcpy 
%170:	icmp	%169 XXX 
%171:	br	%170 if.then if.end 

BASIC BLOCK if.then
%172:	call	XXX getLibraryFunction 
%173:	bitcast	%172 
%174:	store	%173 wcpcpy.real_wcpcpy 
%175:	br	if.end 

BASIC BLOCK if.end
%176:	load	_libsafe_exclude 
%177:	icmp	%176 XXX 
%178:	br	%177 if.end4 if.then2 

BASIC BLOCK if.then2
%179:	load	wcpcpy.real_wcpcpy 
%180:	call	dest src %179 
%181:	br	return 

BASIC BLOCK if.end4
%182:	bitcast	dest 
%183:	call	%182 _libsafe_stackVariableP 
%184:	call	XXX XXX XXX XXX llvm.dbg.value 
%185:	icmp	%183 XXX 
%186:	br	%185 if.end8 if.then6 

BASIC BLOCK if.then6
%187:	load	wcpcpy.real_wcpcpy 
%188:	call	dest src %187 
%189:	br	return 

BASIC BLOCK if.end8
%190:	udiv	%183 XXX 
%191:	call	XXX XXX XXX XXX llvm.dbg.value 
%192:	call	src %190 wcsnlen 
%193:	call	XXX XXX XXX XXX llvm.dbg.value 
%194:	icmp	%192 %190 
%195:	br	%194 if.end12 if.then11 

BASIC BLOCK if.then11
%196:	call	XXX _libsafe_die 
%197:	br	if.end12 

BASIC BLOCK if.end12
%198:	load	wcpcpy.real_wcpcpy 
%199:	call	dest src %198 
%200:	br	return 

BASIC BLOCK return
%201:	phi	%180 %188 %199 
%202:	ret	%201 

FUNCTION memcpy

BASIC BLOCK entry
%203:	call	XXX XXX XXX XXX llvm.dbg.value 
%204:	call	XXX XXX XXX XXX llvm.dbg.value 
%205:	call	XXX XXX XXX XXX llvm.dbg.value 
%206:	load	real_memcpy 
%207:	icmp	%206 XXX 
%208:	br	%207 if.then if.end 

BASIC BLOCK if.then
%209:	call	XXX getLibraryFunction 
%210:	bitcast	%209 
%211:	store	%210 real_memcpy 
%212:	br	if.end 

BASIC BLOCK if.end
%213:	load	_libsafe_exclude 
%214:	icmp	%213 XXX 
%215:	br	%214 if.end4 if.then2 

BASIC BLOCK if.then2
%216:	load	real_memcpy 
%217:	call	dest src n %216 
%218:	br	return 

BASIC BLOCK if.end4
%219:	call	dest _libsafe_stackVariableP 
%220:	call	XXX XXX XXX XXX llvm.dbg.value 
%221:	icmp	%219 XXX 
%222:	br	%221 if.end8 if.then6 

BASIC BLOCK if.then6
%223:	load	real_memcpy 
%224:	call	dest src n %223 
%225:	br	return 

BASIC BLOCK if.end8
%226:	icmp	n %219 
%227:	br	%226 if.end11 if.then10 

BASIC BLOCK if.then10
%228:	call	XXX _libsafe_die 
%229:	br	if.end11 

BASIC BLOCK if.end11
%230:	load	real_memcpy 
%231:	call	dest src n %230 
%232:	br	return 

BASIC BLOCK return
%233:	phi	%217 %224 %231 
%234:	ret	%233 

FUNCTION strcat

BASIC BLOCK entry
%235:	call	XXX XXX XXX XXX llvm.dbg.value 
%236:	call	XXX XXX XXX XXX llvm.dbg.value 
%237:	load	real_memcpy 
%238:	icmp	%237 XXX 
%239:	br	%238 if.then if.end 

BASIC BLOCK if.then
%240:	call	XXX getLibraryFunction 
%241:	bitcast	%240 
%242:	store	%241 real_memcpy 
%243:	br	if.end 

BASIC BLOCK if.end
%244:	load	strcat.real_strcat 
%245:	icmp	%244 XXX 
%246:	br	%245 if.then2 if.end4 

BASIC BLOCK if.then2
%247:	call	XXX getLibraryFunction 
%248:	bitcast	%247 
%249:	store	%248 strcat.real_strcat 
%250:	br	if.end4 

BASIC BLOCK if.end4
%251:	load	_libsafe_exclude 
%252:	icmp	%251 XXX 
%253:	br	%252 if.end8 if.then6 

BASIC BLOCK if.then6
%254:	load	strcat.real_strcat 
%255:	call	dest src %254 
%256:	br	return 

BASIC BLOCK if.end8
%257:	call	dest _libsafe_stackVariableP 
%258:	call	XXX XXX XXX XXX llvm.dbg.value 
%259:	icmp	%257 XXX 
%260:	br	%259 if.end12 if.then10 

BASIC BLOCK if.then10
%261:	load	strcat.real_strcat 
%262:	call	dest src %261 
%263:	br	return 

BASIC BLOCK if.end12
%264:	call	dest %257 strnlen 
%265:	call	XXX XXX XXX XXX llvm.dbg.value 
%266:	call	src %257 strnlen 
%267:	call	XXX XXX XXX XXX llvm.dbg.value 
%268:	add	%264 %266 
%269:	icmp	%268 %257 
%270:	br	%269 if.end17 if.then16 

BASIC BLOCK if.then16
%271:	call	XXX _libsafe_die 
%272:	br	if.end17 

BASIC BLOCK if.end17
%273:	load	real_memcpy 
%274:	getelementptr	dest %264 
%275:	add	%266 XXX 
%276:	call	%274 src %275 %273 
%277:	br	return 

BASIC BLOCK return
%278:	phi	%255 %262 dest 
%279:	ret	%278 

FUNCTION strncat

BASIC BLOCK entry
%280:	call	XXX XXX XXX XXX llvm.dbg.value 
%281:	call	XXX XXX XXX XXX llvm.dbg.value 
%282:	call	XXX XXX XXX XXX llvm.dbg.value 
%283:	load	strncat.real_strncat 
%284:	icmp	%283 XXX 
%285:	br	%284 if.then if.end 

BASIC BLOCK if.then
%286:	call	XXX getLibraryFunction 
%287:	bitcast	%286 
%288:	store	%287 strncat.real_strncat 
%289:	br	if.end 

BASIC BLOCK if.end
%290:	load	_libsafe_exclude 
%291:	icmp	%290 XXX 
%292:	br	%291 if.end4 if.then2 

BASIC BLOCK if.then2
%293:	load	strncat.real_strncat 
%294:	call	dest src n %293 
%295:	br	return 

BASIC BLOCK if.end4
%296:	call	dest _libsafe_stackVariableP 
%297:	call	XXX XXX XXX XXX llvm.dbg.value 
%298:	icmp	%296 XXX 
%299:	br	%298 if.end8 if.then6 

BASIC BLOCK if.then6
%300:	load	strncat.real_strncat 
%301:	call	dest src n %300 
%302:	br	return 

BASIC BLOCK if.end8
%303:	call	dest %296 strnlen 
%304:	call	XXX XXX XXX XXX llvm.dbg.value 
%305:	call	src %296 strnlen 
%306:	call	XXX XXX XXX XXX llvm.dbg.value 
%307:	add	%303 n 
%308:	icmp	%307 %296 
%309:	br	%308 if.end15 land.lhs.true 

BASIC BLOCK land.lhs.true
%310:	add	%303 %305 
%311:	icmp	%310 %296 
%312:	br	%311 if.end15 if.then14 

BASIC BLOCK if.then14
%313:	call	XXX _libsafe_die 
%314:	br	if.end15 

BASIC BLOCK if.end15
%315:	load	strncat.real_strncat 
%316:	call	dest src n %315 
%317:	br	return 

BASIC BLOCK return
%318:	phi	%294 %301 %316 
%319:	ret	%318 

FUNCTION wcscat

BASIC BLOCK entry
%320:	call	XXX XXX XXX XXX llvm.dbg.value 
%321:	call	XXX XXX XXX XXX llvm.dbg.value 
%322:	load	real_memcpy 
%323:	icmp	%322 XXX 
%324:	br	%323 if.then if.end 

BASIC BLOCK if.then
%325:	call	XXX getLibraryFunction 
%326:	bitcast	%325 
%327:	store	%326 real_memcpy 
%328:	br	if.end 

BASIC BLOCK if.end
%329:	load	wcscat.real_wcscat 
%330:	icmp	%329 XXX 
%331:	br	%330 if.then2 if.end4 

BASIC BLOCK if.then2
%332:	call	XXX getLibraryFunction 
%333:	bitcast	%332 
%334:	store	%333 wcscat.real_wcscat 
%335:	br	if.end4 

BASIC BLOCK if.end4
%336:	load	_libsafe_exclude 
%337:	icmp	%336 XXX 
%338:	br	%337 if.end8 if.then6 

BASIC BLOCK if.then6
%339:	load	wcscat.real_wcscat 
%340:	call	dest src %339 
%341:	br	return 

BASIC BLOCK if.end8
%342:	bitcast	dest 
%343:	call	%342 _libsafe_stackVariableP 
%344:	call	XXX XXX XXX XXX llvm.dbg.value 
%345:	icmp	%343 XXX 
%346:	br	%345 if.end12 if.then10 

BASIC BLOCK if.then10
%347:	load	wcscat.real_wcscat 
%348:	call	dest src %347 
%349:	br	return 

BASIC BLOCK if.end12
%350:	udiv	%343 XXX 
%351:	call	dest %350 wcsnlen 
%352:	call	XXX XXX XXX XXX llvm.dbg.value 
%353:	udiv	%343 XXX 
%354:	call	src %353 wcsnlen 
%355:	call	XXX XXX XXX XXX llvm.dbg.value 
%356:	add	%351 %354 
%357:	add	%356 XXX 
%358:	udiv	%343 XXX 
%359:	icmp	%357 %358 
%360:	br	%359 if.end20 if.then19 

BASIC BLOCK if.then19
%361:	call	XXX _libsafe_die 
%362:	br	if.end20 

BASIC BLOCK if.end20
%363:	load	real_memcpy 
%364:	getelementptr	dest %351 
%365:	bitcast	%364 
%366:	bitcast	src 
%367:	add	%354 XXX 
%368:	call	%365 %366 %367 %363 
%369:	br	return 

BASIC BLOCK return
%370:	phi	%340 %348 dest 
%371:	ret	%370 

FUNCTION vfprintf

BASIC BLOCK entry
%372:	call	XXX XXX XXX XXX llvm.dbg.value 
%373:	call	XXX XXX XXX XXX llvm.dbg.value 
%374:	call	XXX XXX XXX XXX llvm.dbg.value 
%375:	call	XXX XXX XXX XXX llvm.dbg.value 
%376:	load	vfprintf.real_vfprintf 
%377:	icmp	%376 XXX 
%378:	br	%377 if.then if.end 

BASIC BLOCK if.then
%379:	call	XXX getLibraryFunction 
%380:	bitcast	%379 
%381:	store	%380 vfprintf.real_vfprintf 
%382:	br	if.end 

BASIC BLOCK if.end
%383:	load	_libsafe_exclude 
%384:	icmp	%383 XXX 
%385:	br	%384 if.end4 if.then2 

BASIC BLOCK if.then2
%386:	load	vfprintf.real_vfprintf 
%387:	call	fp format ap %386 
%388:	call	XXX XXX XXX XXX llvm.dbg.value 
%389:	br	return 

BASIC BLOCK if.end4
%390:	call	XXX XXX XXX XXX llvm.dbg.value 
%391:	br	for.cond 

BASIC BLOCK for.cond
%392:	phi	format %748 
%393:	phi	XXX %747 
%394:	load	%392 
%395:	icmp	%394 XXX 
%396:	br	%395 for.end241 for.body 

BASIC BLOCK for.body
%397:	load	%392 
%398:	sext	%397 
%399:	icmp	%398 XXX 
%400:	br	%399 if.end238 if.then7 

BASIC BLOCK if.then7
%401:	call	XXX XXX XXX XXX llvm.dbg.value 
%402:	getelementptr	%392 XXX 
%403:	call	XXX XXX XXX XXX llvm.dbg.value 
%404:	call	XXX XXX XXX XXX llvm.dbg.value 
%405:	br	for.cond8 

BASIC BLOCK for.cond8
%406:	phi	XXX %429 
%407:	phi	%402 %432 
%408:	phi	XXX XXX 
%409:	load	%407 
%410:	sext	%409 
%411:	icmp	%410 XXX 
%412:	br	%411 land.end land.rhs 

BASIC BLOCK land.rhs
%413:	load	%407 
%414:	sext	%413 
%415:	call	__ctype_b_loc 
%416:	load	%415 
%417:	getelementptr	%416 %414 
%418:	load	%417 
%419:	zext	%418 
%420:	and	%419 XXX 
%421:	icmp	%420 XXX 
%422:	br	land.end 

BASIC BLOCK land.end
%423:	phi	XXX %421 
%424:	br	%423 for.end for.body15 

BASIC BLOCK for.body15
%425:	icmp	%408 XXX 
%426:	br	%425 if.end19 if.then18 

BASIC BLOCK if.then18
%427:	call	XXX XXX XXX XXX llvm.dbg.value 
%428:	br	if.end19 

BASIC BLOCK if.end19
%429:	phi	%407 %406 
%430:	call	XXX XXX XXX XXX llvm.dbg.value 
%431:	br	for.inc 

BASIC BLOCK for.inc
%432:	getelementptr	%407 XXX 
%433:	call	XXX XXX XXX XXX llvm.dbg.value 
%434:	br	for.cond8 

BASIC BLOCK for.end
%435:	load	%407 
%436:	sext	%435 
%437:	icmp	%436 XXX 
%438:	br	%437 if.end25 if.then24 

BASIC BLOCK if.then24
%439:	br	for.end241 

BASIC BLOCK if.end25
%440:	icmp	%408 XXX 
%441:	br	%440 if.end35 if.then27 

BASIC BLOCK if.then27
%442:	load	%407 
%443:	sext	%442 
%444:	icmp	%443 XXX 
%445:	br	%444 if.else if.then31 

BASIC BLOCK if.then31
%446:	getelementptr	%407 XXX 
%447:	call	XXX XXX XXX XXX llvm.dbg.value 
%448:	br	if.end34 

BASIC BLOCK if.else
%449:	add	%393 XXX 
%450:	call	XXX XXX XXX XXX llvm.dbg.value 
%451:	getelementptr	%407 XXX 
%452:	call	XXX XXX XXX XXX llvm.dbg.value 
%453:	br	for.inc239 

BASIC BLOCK if.end34
%454:	br	if.end35 

BASIC BLOCK if.end35
%455:	phi	%446 %407 
%456:	br	for.cond36 

BASIC BLOCK for.cond36
%457:	phi	%455 %472 
%458:	load	%457 
%459:	sext	%458 
%460:	icmp	%459 XXX 
%461:	br	%460 land.end44 land.rhs39 

BASIC BLOCK land.rhs39
%462:	load	%457 
%463:	sext	%462 
%464:	getelementptr	is_printf_flag XXX %463 
%465:	load	%464 
%466:	sext	%465 
%467:	icmp	%466 XXX 
%468:	br	land.end44 

BASIC BLOCK land.end44
%469:	phi	XXX %467 
%470:	br	%469 for.end48 for.body45 

BASIC BLOCK for.body45
%471:	br	for.inc46 

BASIC BLOCK for.inc46
%472:	getelementptr	%457 XXX 
%473:	call	XXX XXX XXX XXX llvm.dbg.value 
%474:	br	for.cond36 

BASIC BLOCK for.end48
%475:	load	%457 
%476:	sext	%475 
%477:	icmp	%476 XXX 
%478:	br	%477 if.end53 if.then52 

BASIC BLOCK if.then52
%479:	br	for.end241 

BASIC BLOCK if.end53
%480:	load	%457 
%481:	sext	%480 
%482:	icmp	%481 XXX 
%483:	br	%482 if.else93 if.then57 

BASIC BLOCK if.then57
%484:	getelementptr	%457 XXX 
%485:	call	XXX XXX XXX XXX llvm.dbg.value 
%486:	call	XXX XXX XXX XXX llvm.dbg.value 
%487:	br	for.cond59 

BASIC BLOCK for.cond59
%488:	phi	%484 %508 
%489:	phi	XXX XXX 
%490:	load	%488 
%491:	sext	%490 
%492:	icmp	%491 XXX 
%493:	br	%492 land.end69 land.rhs62 

BASIC BLOCK land.rhs62
%494:	load	%488 
%495:	sext	%494 
%496:	call	__ctype_b_loc 
%497:	load	%496 
%498:	getelementptr	%497 %495 
%499:	load	%498 
%500:	zext	%499 
%501:	and	%500 XXX 
%502:	icmp	%501 XXX 
%503:	br	land.end69 

BASIC BLOCK land.end69
%504:	phi	XXX %502 
%505:	br	%504 for.end73 for.body70 

BASIC BLOCK for.body70
%506:	call	XXX XXX XXX XXX llvm.dbg.value 
%507:	br	for.inc71 

BASIC BLOCK for.inc71
%508:	getelementptr	%488 XXX 
%509:	call	XXX XXX XXX XXX llvm.dbg.value 
%510:	br	for.cond59 

BASIC BLOCK for.end73
%511:	load	%488 
%512:	sext	%511 
%513:	icmp	%512 XXX 
%514:	br	%513 if.end78 if.then77 

BASIC BLOCK if.then77
%515:	br	for.end241 

BASIC BLOCK if.end78
%516:	icmp	%489 XXX 
%517:	br	%516 if.else90 if.then80 

BASIC BLOCK if.then80
%518:	load	%488 
%519:	sext	%518 
%520:	icmp	%519 XXX 
%521:	br	%520 if.else86 if.then84 

BASIC BLOCK if.then84
%522:	getelementptr	%488 XXX 
%523:	call	XXX XXX XXX XXX llvm.dbg.value 
%524:	br	if.end89 

BASIC BLOCK if.else86
%525:	add	%393 XXX 
%526:	call	XXX XXX XXX XXX llvm.dbg.value 
%527:	getelementptr	%488 XXX 
%528:	call	XXX XXX XXX XXX llvm.dbg.value 
%529:	br	for.inc239 

BASIC BLOCK if.end89
%530:	br	if.end92 

BASIC BLOCK if.else90
%531:	add	%393 XXX 
%532:	call	XXX XXX XXX XXX llvm.dbg.value 
%533:	br	if.end92 

BASIC BLOCK if.end92
%534:	phi	%522 %488 
%535:	phi	%393 %531 
%536:	br	if.end114 

BASIC BLOCK if.else93
%537:	br	for.cond94 

BASIC BLOCK for.cond94
%538:	phi	%457 %556 
%539:	load	%538 
%540:	sext	%539 
%541:	icmp	%540 XXX 
%542:	br	%541 land.end104 land.rhs97 

BASIC BLOCK land.rhs97
%543:	load	%538 
%544:	sext	%543 
%545:	call	__ctype_b_loc 
%546:	load	%545 
%547:	getelementptr	%546 %544 
%548:	load	%547 
%549:	zext	%548 
%550:	and	%549 XXX 
%551:	icmp	%550 XXX 
%552:	br	land.end104 

BASIC BLOCK land.end104
%553:	phi	XXX %551 
%554:	br	%553 for.end108 for.body105 

BASIC BLOCK for.body105
%555:	br	for.inc106 

BASIC BLOCK for.inc106
%556:	getelementptr	%538 XXX 
%557:	call	XXX XXX XXX XXX llvm.dbg.value 
%558:	br	for.cond94 

BASIC BLOCK for.end108
%559:	load	%538 
%560:	sext	%559 
%561:	icmp	%560 XXX 
%562:	br	%561 if.end113 if.then112 

BASIC BLOCK if.then112
%563:	br	for.end241 

BASIC BLOCK if.end113
%564:	br	if.end114 

BASIC BLOCK if.end114
%565:	phi	%534 %538 
%566:	phi	%535 %393 
%567:	load	%565 
%568:	sext	%567 
%569:	icmp	%568 XXX 
%570:	br	%569 if.end181 if.then118 

BASIC BLOCK if.then118
%571:	getelementptr	%565 XXX 
%572:	call	XXX XXX XXX XXX llvm.dbg.value 
%573:	load	%571 
%574:	sext	%573 
%575:	icmp	%574 XXX 
%576:	br	%575 if.else159 if.then123 

BASIC BLOCK if.then123
%577:	getelementptr	%571 XXX 
%578:	call	XXX XXX XXX XXX llvm.dbg.value 
%579:	call	XXX XXX XXX XXX llvm.dbg.value 
%580:	br	for.cond125 

BASIC BLOCK for.cond125
%581:	phi	%577 %601 
%582:	phi	XXX XXX 
%583:	load	%581 
%584:	sext	%583 
%585:	icmp	%584 XXX 
%586:	br	%585 land.end135 land.rhs128 

BASIC BLOCK land.rhs128
%587:	load	%581 
%588:	sext	%587 
%589:	call	__ctype_b_loc 
%590:	load	%589 
%591:	getelementptr	%590 %588 
%592:	load	%591 
%593:	zext	%592 
%594:	and	%593 XXX 
%595:	icmp	%594 XXX 
%596:	br	land.end135 

BASIC BLOCK land.end135
%597:	phi	XXX %595 
%598:	br	%597 for.end139 for.body136 

BASIC BLOCK for.body136
%599:	call	XXX XXX XXX XXX llvm.dbg.value 
%600:	br	for.inc137 

BASIC BLOCK for.inc137
%601:	getelementptr	%581 XXX 
%602:	call	XXX XXX XXX XXX llvm.dbg.value 
%603:	br	for.cond125 

BASIC BLOCK for.end139
%604:	load	%581 
%605:	sext	%604 
%606:	icmp	%605 XXX 
%607:	br	%606 if.end144 if.then143 

BASIC BLOCK if.then143
%608:	br	for.end241 

BASIC BLOCK if.end144
%609:	icmp	%582 XXX 
%610:	br	%609 if.else156 if.then146 

BASIC BLOCK if.then146
%611:	load	%581 
%612:	sext	%611 
%613:	icmp	%612 XXX 
%614:	br	%613 if.else152 if.then150 

BASIC BLOCK if.then150
%615:	getelementptr	%581 XXX 
%616:	call	XXX XXX XXX XXX llvm.dbg.value 
%617:	br	if.end155 

BASIC BLOCK if.else152
%618:	add	%566 XXX 
%619:	call	XXX XXX XXX XXX llvm.dbg.value 
%620:	getelementptr	%581 XXX 
%621:	call	XXX XXX XXX XXX llvm.dbg.value 
%622:	br	for.inc239 

BASIC BLOCK if.end155
%623:	br	if.end158 

BASIC BLOCK if.else156
%624:	add	%566 XXX 
%625:	call	XXX XXX XXX XXX llvm.dbg.value 
%626:	br	if.end158 

BASIC BLOCK if.end158
%627:	phi	%615 %581 
%628:	phi	%566 %624 
%629:	br	if.end180 

BASIC BLOCK if.else159
%630:	br	for.cond160 

BASIC BLOCK for.cond160
%631:	phi	%571 %649 
%632:	load	%631 
%633:	sext	%632 
%634:	icmp	%633 XXX 
%635:	br	%634 land.end170 land.rhs163 

BASIC BLOCK land.rhs163
%636:	load	%631 
%637:	sext	%636 
%638:	call	__ctype_b_loc 
%639:	load	%638 
%640:	getelementptr	%639 %637 
%641:	load	%640 
%642:	zext	%641 
%643:	and	%642 XXX 
%644:	icmp	%643 XXX 
%645:	br	land.end170 

BASIC BLOCK land.end170
%646:	phi	XXX %644 
%647:	br	%646 for.end174 for.body171 

BASIC BLOCK for.body171
%648:	br	for.inc172 

BASIC BLOCK for.inc172
%649:	getelementptr	%631 XXX 
%650:	call	XXX XXX XXX XXX llvm.dbg.value 
%651:	br	for.cond160 

BASIC BLOCK for.end174
%652:	load	%631 
%653:	sext	%652 
%654:	icmp	%653 XXX 
%655:	br	%654 if.end179 if.then178 

BASIC BLOCK if.then178
%656:	br	for.end241 

BASIC BLOCK if.end179
%657:	br	if.end180 

BASIC BLOCK if.end180
%658:	phi	%627 %631 
%659:	phi	%628 %566 
%660:	br	if.end181 

BASIC BLOCK if.end181
%661:	phi	%658 %565 
%662:	phi	%659 %566 
%663:	load	%661 
%664:	sext	%663 
%665:	getelementptr	is_printf_lengthmod XXX %664 
%666:	load	%665 
%667:	icmp	%666 XXX 
%668:	br	%667 if.end214 if.then185 

BASIC BLOCK if.then185
%669:	getelementptr	%661 XXX 
%670:	call	XXX XXX XXX XXX llvm.dbg.value 
%671:	load	%669 
%672:	sext	%671 
%673:	icmp	%672 XXX 
%674:	br	%673 if.end191 if.then190 

BASIC BLOCK if.then190
%675:	br	for.end241 

BASIC BLOCK if.end191
%676:	load	%669 
%677:	sext	%676 
%678:	icmp	%677 XXX 
%679:	br	%678 lor.lhs.false land.lhs.true 

BASIC BLOCK land.lhs.true
%680:	getelementptr	%669 XXX 
%681:	load	%680 
%682:	sext	%681 
%683:	icmp	%682 XXX 
%684:	br	%683 lor.lhs.false if.then206 

BASIC BLOCK lor.lhs.false
%685:	load	%669 
%686:	sext	%685 
%687:	icmp	%686 XXX 
%688:	br	%687 if.end208 land.lhs.true201 

BASIC BLOCK land.lhs.true201
%689:	getelementptr	%669 XXX 
%690:	load	%689 
%691:	sext	%690 
%692:	icmp	%691 XXX 
%693:	br	%692 if.end208 if.then206 

BASIC BLOCK if.then206
%694:	getelementptr	%669 XXX 
%695:	call	XXX XXX XXX XXX llvm.dbg.value 
%696:	br	if.end208 

BASIC BLOCK if.end208
%697:	phi	%694 %669 %669 
%698:	load	%697 
%699:	sext	%698 
%700:	icmp	%699 XXX 
%701:	br	%700 if.end213 if.then212 

BASIC BLOCK if.then212
%702:	br	for.end241 

BASIC BLOCK if.end213
%703:	br	if.end214 

BASIC BLOCK if.end214
%704:	phi	%697 %661 
%705:	load	%704 
%706:	sext	%705 
%707:	getelementptr	is_printf_convspec XXX %706 
%708:	load	%707 
%709:	icmp	%708 XXX 
%710:	br	%709 if.end237 if.then218 

BASIC BLOCK if.then218
%711:	add	%662 XXX 
%712:	call	XXX XXX XXX XXX llvm.dbg.value 
%713:	icmp	%406 XXX 
%714:	br	%713 if.else224 if.then221 

BASIC BLOCK if.then221
%715:	call	%406 atoi 
%716:	sub	%715 XXX 
%717:	mul	%716 XXX 
%718:	getelementptr	ap %717 
%719:	bitcast	%718 
%720:	load	%719 
%721:	call	XXX XXX XXX XXX llvm.dbg.value 
%722:	br	if.end227 

BASIC BLOCK if.else224
%723:	mul	%711 XXX 
%724:	getelementptr	ap %723 
%725:	bitcast	%724 
%726:	load	%725 
%727:	call	XXX XXX XXX XXX llvm.dbg.value 
%728:	br	if.end227 

BASIC BLOCK if.end227
%729:	phi	%720 %726 
%730:	load	%704 
%731:	sext	%730 
%732:	icmp	%731 XXX 
%733:	br	%732 if.end236 if.then231 

BASIC BLOCK if.then231
%734:	call	%729 _libsafe_raVariableP 
%735:	icmp	%734 XXX 
%736:	br	%735 if.end235 if.then234 

BASIC BLOCK if.then234
%737:	call	XXX _libsafe_die 
%738:	br	if.end235 

BASIC BLOCK if.end235
%739:	br	if.end236 

BASIC BLOCK if.end236
%740:	br	if.end237 

BASIC BLOCK if.end237
%741:	phi	%711 %662 
%742:	br	if.end238 

BASIC BLOCK if.end238
%743:	phi	%704 %392 
%744:	phi	%741 %393 
%745:	br	for.inc239 

BASIC BLOCK for.inc239
%746:	phi	%743 %620 %527 %451 
%747:	phi	%744 %618 %525 %449 
%748:	getelementptr	%746 XXX 
%749:	call	XXX XXX XXX XXX llvm.dbg.value 
%750:	br	for.cond 

BASIC BLOCK for.end241
%751:	load	vfprintf.real_vfprintf 
%752:	call	fp format ap %751 
%753:	call	XXX XXX XXX XXX llvm.dbg.value 
%754:	br	return 

BASIC BLOCK return
%755:	phi	%387 %752 
%756:	ret	%755 

FUNCTION __ctype_b_loc

FUNCTION atoi

FUNCTION _libsafe_raVariableP

FUNCTION _IO_vfprintf

BASIC BLOCK entry
%757:	call	XXX XXX XXX XXX llvm.dbg.value 
%758:	call	XXX XXX XXX XXX llvm.dbg.value 
%759:	call	XXX XXX XXX XXX llvm.dbg.value 
%760:	call	XXX XXX XXX XXX llvm.dbg.value 
%761:	load	_IO_vfprintf.real_vfprintf 
%762:	icmp	%761 XXX 
%763:	br	%762 if.then if.end 

BASIC BLOCK if.then
%764:	call	XXX getLibraryFunction 
%765:	bitcast	%764 
%766:	store	%765 _IO_vfprintf.real_vfprintf 
%767:	br	if.end 

BASIC BLOCK if.end
%768:	load	_libsafe_exclude 
%769:	icmp	%768 XXX 
%770:	br	%769 if.end4 if.then2 

BASIC BLOCK if.then2
%771:	load	_IO_vfprintf.real_vfprintf 
%772:	call	fp format ap %771 
%773:	call	XXX XXX XXX XXX llvm.dbg.value 
%774:	br	return 

BASIC BLOCK if.end4
%775:	call	XXX XXX XXX XXX llvm.dbg.value 
%776:	br	for.cond 

BASIC BLOCK for.cond
%777:	phi	format %1133 
%778:	phi	XXX %1132 
%779:	load	%777 
%780:	icmp	%779 XXX 
%781:	br	%780 for.end241 for.body 

BASIC BLOCK for.body
%782:	load	%777 
%783:	sext	%782 
%784:	icmp	%783 XXX 
%785:	br	%784 if.end238 if.then7 

BASIC BLOCK if.then7
%786:	call	XXX XXX XXX XXX llvm.dbg.value 
%787:	getelementptr	%777 XXX 
%788:	call	XXX XXX XXX XXX llvm.dbg.value 
%789:	call	XXX XXX XXX XXX llvm.dbg.value 
%790:	br	for.cond8 

BASIC BLOCK for.cond8
%791:	phi	XXX %814 
%792:	phi	%787 %817 
%793:	phi	XXX XXX 
%794:	load	%792 
%795:	sext	%794 
%796:	icmp	%795 XXX 
%797:	br	%796 land.end land.rhs 

BASIC BLOCK land.rhs
%798:	load	%792 
%799:	sext	%798 
%800:	call	__ctype_b_loc 
%801:	load	%800 
%802:	getelementptr	%801 %799 
%803:	load	%802 
%804:	zext	%803 
%805:	and	%804 XXX 
%806:	icmp	%805 XXX 
%807:	br	land.end 

BASIC BLOCK land.end
%808:	phi	XXX %806 
%809:	br	%808 for.end for.body15 

BASIC BLOCK for.body15
%810:	icmp	%793 XXX 
%811:	br	%810 if.end19 if.then18 

BASIC BLOCK if.then18
%812:	call	XXX XXX XXX XXX llvm.dbg.value 
%813:	br	if.end19 

BASIC BLOCK if.end19
%814:	phi	%792 %791 
%815:	call	XXX XXX XXX XXX llvm.dbg.value 
%816:	br	for.inc 

BASIC BLOCK for.inc
%817:	getelementptr	%792 XXX 
%818:	call	XXX XXX XXX XXX llvm.dbg.value 
%819:	br	for.cond8 

BASIC BLOCK for.end
%820:	load	%792 
%821:	sext	%820 
%822:	icmp	%821 XXX 
%823:	br	%822 if.end25 if.then24 

BASIC BLOCK if.then24
%824:	br	for.end241 

BASIC BLOCK if.end25
%825:	icmp	%793 XXX 
%826:	br	%825 if.end35 if.then27 

BASIC BLOCK if.then27
%827:	load	%792 
%828:	sext	%827 
%829:	icmp	%828 XXX 
%830:	br	%829 if.else if.then31 

BASIC BLOCK if.then31
%831:	getelementptr	%792 XXX 
%832:	call	XXX XXX XXX XXX llvm.dbg.value 
%833:	br	if.end34 

BASIC BLOCK if.else
%834:	add	%778 XXX 
%835:	call	XXX XXX XXX XXX llvm.dbg.value 
%836:	getelementptr	%792 XXX 
%837:	call	XXX XXX XXX XXX llvm.dbg.value 
%838:	br	for.inc239 

BASIC BLOCK if.end34
%839:	br	if.end35 

BASIC BLOCK if.end35
%840:	phi	%831 %792 
%841:	br	for.cond36 

BASIC BLOCK for.cond36
%842:	phi	%840 %857 
%843:	load	%842 
%844:	sext	%843 
%845:	icmp	%844 XXX 
%846:	br	%845 land.end44 land.rhs39 

BASIC BLOCK land.rhs39
%847:	load	%842 
%848:	sext	%847 
%849:	getelementptr	is_printf_flag XXX %848 
%850:	load	%849 
%851:	sext	%850 
%852:	icmp	%851 XXX 
%853:	br	land.end44 

BASIC BLOCK land.end44
%854:	phi	XXX %852 
%855:	br	%854 for.end48 for.body45 

BASIC BLOCK for.body45
%856:	br	for.inc46 

BASIC BLOCK for.inc46
%857:	getelementptr	%842 XXX 
%858:	call	XXX XXX XXX XXX llvm.dbg.value 
%859:	br	for.cond36 

BASIC BLOCK for.end48
%860:	load	%842 
%861:	sext	%860 
%862:	icmp	%861 XXX 
%863:	br	%862 if.end53 if.then52 

BASIC BLOCK if.then52
%864:	br	for.end241 

BASIC BLOCK if.end53
%865:	load	%842 
%866:	sext	%865 
%867:	icmp	%866 XXX 
%868:	br	%867 if.else93 if.then57 

BASIC BLOCK if.then57
%869:	getelementptr	%842 XXX 
%870:	call	XXX XXX XXX XXX llvm.dbg.value 
%871:	call	XXX XXX XXX XXX llvm.dbg.value 
%872:	br	for.cond59 

BASIC BLOCK for.cond59
%873:	phi	%869 %893 
%874:	phi	XXX XXX 
%875:	load	%873 
%876:	sext	%875 
%877:	icmp	%876 XXX 
%878:	br	%877 land.end69 land.rhs62 

BASIC BLOCK land.rhs62
%879:	load	%873 
%880:	sext	%879 
%881:	call	__ctype_b_loc 
%882:	load	%881 
%883:	getelementptr	%882 %880 
%884:	load	%883 
%885:	zext	%884 
%886:	and	%885 XXX 
%887:	icmp	%886 XXX 
%888:	br	land.end69 

BASIC BLOCK land.end69
%889:	phi	XXX %887 
%890:	br	%889 for.end73 for.body70 

BASIC BLOCK for.body70
%891:	call	XXX XXX XXX XXX llvm.dbg.value 
%892:	br	for.inc71 

BASIC BLOCK for.inc71
%893:	getelementptr	%873 XXX 
%894:	call	XXX XXX XXX XXX llvm.dbg.value 
%895:	br	for.cond59 

BASIC BLOCK for.end73
%896:	load	%873 
%897:	sext	%896 
%898:	icmp	%897 XXX 
%899:	br	%898 if.end78 if.then77 

BASIC BLOCK if.then77
%900:	br	for.end241 

BASIC BLOCK if.end78
%901:	icmp	%874 XXX 
%902:	br	%901 if.else90 if.then80 

BASIC BLOCK if.then80
%903:	load	%873 
%904:	sext	%903 
%905:	icmp	%904 XXX 
%906:	br	%905 if.else86 if.then84 

BASIC BLOCK if.then84
%907:	getelementptr	%873 XXX 
%908:	call	XXX XXX XXX XXX llvm.dbg.value 
%909:	br	if.end89 

BASIC BLOCK if.else86
%910:	add	%778 XXX 
%911:	call	XXX XXX XXX XXX llvm.dbg.value 
%912:	getelementptr	%873 XXX 
%913:	call	XXX XXX XXX XXX llvm.dbg.value 
%914:	br	for.inc239 

BASIC BLOCK if.end89
%915:	br	if.end92 

BASIC BLOCK if.else90
%916:	add	%778 XXX 
%917:	call	XXX XXX XXX XXX llvm.dbg.value 
%918:	br	if.end92 

BASIC BLOCK if.end92
%919:	phi	%907 %873 
%920:	phi	%778 %916 
%921:	br	if.end114 

BASIC BLOCK if.else93
%922:	br	for.cond94 

BASIC BLOCK for.cond94
%923:	phi	%842 %941 
%924:	load	%923 
%925:	sext	%924 
%926:	icmp	%925 XXX 
%927:	br	%926 land.end104 land.rhs97 

BASIC BLOCK land.rhs97
%928:	load	%923 
%929:	sext	%928 
%930:	call	__ctype_b_loc 
%931:	load	%930 
%932:	getelementptr	%931 %929 
%933:	load	%932 
%934:	zext	%933 
%935:	and	%934 XXX 
%936:	icmp	%935 XXX 
%937:	br	land.end104 

BASIC BLOCK land.end104
%938:	phi	XXX %936 
%939:	br	%938 for.end108 for.body105 

BASIC BLOCK for.body105
%940:	br	for.inc106 

BASIC BLOCK for.inc106
%941:	getelementptr	%923 XXX 
%942:	call	XXX XXX XXX XXX llvm.dbg.value 
%943:	br	for.cond94 

BASIC BLOCK for.end108
%944:	load	%923 
%945:	sext	%944 
%946:	icmp	%945 XXX 
%947:	br	%946 if.end113 if.then112 

BASIC BLOCK if.then112
%948:	br	for.end241 

BASIC BLOCK if.end113
%949:	br	if.end114 

BASIC BLOCK if.end114
%950:	phi	%919 %923 
%951:	phi	%920 %778 
%952:	load	%950 
%953:	sext	%952 
%954:	icmp	%953 XXX 
%955:	br	%954 if.end181 if.then118 

BASIC BLOCK if.then118
%956:	getelementptr	%950 XXX 
%957:	call	XXX XXX XXX XXX llvm.dbg.value 
%958:	load	%956 
%959:	sext	%958 
%960:	icmp	%959 XXX 
%961:	br	%960 if.else159 if.then123 

BASIC BLOCK if.then123
%962:	getelementptr	%956 XXX 
%963:	call	XXX XXX XXX XXX llvm.dbg.value 
%964:	call	XXX XXX XXX XXX llvm.dbg.value 
%965:	br	for.cond125 

BASIC BLOCK for.cond125
%966:	phi	%962 %986 
%967:	phi	XXX XXX 
%968:	load	%966 
%969:	sext	%968 
%970:	icmp	%969 XXX 
%971:	br	%970 land.end135 land.rhs128 

BASIC BLOCK land.rhs128
%972:	load	%966 
%973:	sext	%972 
%974:	call	__ctype_b_loc 
%975:	load	%974 
%976:	getelementptr	%975 %973 
%977:	load	%976 
%978:	zext	%977 
%979:	and	%978 XXX 
%980:	icmp	%979 XXX 
%981:	br	land.end135 

BASIC BLOCK land.end135
%982:	phi	XXX %980 
%983:	br	%982 for.end139 for.body136 

BASIC BLOCK for.body136
%984:	call	XXX XXX XXX XXX llvm.dbg.value 
%985:	br	for.inc137 

BASIC BLOCK for.inc137
%986:	getelementptr	%966 XXX 
%987:	call	XXX XXX XXX XXX llvm.dbg.value 
%988:	br	for.cond125 

BASIC BLOCK for.end139
%989:	load	%966 
%990:	sext	%989 
%991:	icmp	%990 XXX 
%992:	br	%991 if.end144 if.then143 

BASIC BLOCK if.then143
%993:	br	for.end241 

BASIC BLOCK if.end144
%994:	icmp	%967 XXX 
%995:	br	%994 if.else156 if.then146 

BASIC BLOCK if.then146
%996:	load	%966 
%997:	sext	%996 
%998:	icmp	%997 XXX 
%999:	br	%998 if.else152 if.then150 

BASIC BLOCK if.then150
%1000:	getelementptr	%966 XXX 
%1001:	call	XXX XXX XXX XXX llvm.dbg.value 
%1002:	br	if.end155 

BASIC BLOCK if.else152
%1003:	add	%951 XXX 
%1004:	call	XXX XXX XXX XXX llvm.dbg.value 
%1005:	getelementptr	%966 XXX 
%1006:	call	XXX XXX XXX XXX llvm.dbg.value 
%1007:	br	for.inc239 

BASIC BLOCK if.end155
%1008:	br	if.end158 

BASIC BLOCK if.else156
%1009:	add	%951 XXX 
%1010:	call	XXX XXX XXX XXX llvm.dbg.value 
%1011:	br	if.end158 

BASIC BLOCK if.end158
%1012:	phi	%1000 %966 
%1013:	phi	%951 %1009 
%1014:	br	if.end180 

BASIC BLOCK if.else159
%1015:	br	for.cond160 

BASIC BLOCK for.cond160
%1016:	phi	%956 %1034 
%1017:	load	%1016 
%1018:	sext	%1017 
%1019:	icmp	%1018 XXX 
%1020:	br	%1019 land.end170 land.rhs163 

BASIC BLOCK land.rhs163
%1021:	load	%1016 
%1022:	sext	%1021 
%1023:	call	__ctype_b_loc 
%1024:	load	%1023 
%1025:	getelementptr	%1024 %1022 
%1026:	load	%1025 
%1027:	zext	%1026 
%1028:	and	%1027 XXX 
%1029:	icmp	%1028 XXX 
%1030:	br	land.end170 

BASIC BLOCK land.end170
%1031:	phi	XXX %1029 
%1032:	br	%1031 for.end174 for.body171 

BASIC BLOCK for.body171
%1033:	br	for.inc172 

BASIC BLOCK for.inc172
%1034:	getelementptr	%1016 XXX 
%1035:	call	XXX XXX XXX XXX llvm.dbg.value 
%1036:	br	for.cond160 

BASIC BLOCK for.end174
%1037:	load	%1016 
%1038:	sext	%1037 
%1039:	icmp	%1038 XXX 
%1040:	br	%1039 if.end179 if.then178 

BASIC BLOCK if.then178
%1041:	br	for.end241 

BASIC BLOCK if.end179
%1042:	br	if.end180 

BASIC BLOCK if.end180
%1043:	phi	%1012 %1016 
%1044:	phi	%1013 %951 
%1045:	br	if.end181 

BASIC BLOCK if.end181
%1046:	phi	%1043 %950 
%1047:	phi	%1044 %951 
%1048:	load	%1046 
%1049:	sext	%1048 
%1050:	getelementptr	is_printf_lengthmod XXX %1049 
%1051:	load	%1050 
%1052:	icmp	%1051 XXX 
%1053:	br	%1052 if.end214 if.then185 

BASIC BLOCK if.then185
%1054:	getelementptr	%1046 XXX 
%1055:	call	XXX XXX XXX XXX llvm.dbg.value 
%1056:	load	%1054 
%1057:	sext	%1056 
%1058:	icmp	%1057 XXX 
%1059:	br	%1058 if.end191 if.then190 

BASIC BLOCK if.then190
%1060:	br	for.end241 

BASIC BLOCK if.end191
%1061:	load	%1054 
%1062:	sext	%1061 
%1063:	icmp	%1062 XXX 
%1064:	br	%1063 lor.lhs.false land.lhs.true 

BASIC BLOCK land.lhs.true
%1065:	getelementptr	%1054 XXX 
%1066:	load	%1065 
%1067:	sext	%1066 
%1068:	icmp	%1067 XXX 
%1069:	br	%1068 lor.lhs.false if.then206 

BASIC BLOCK lor.lhs.false
%1070:	load	%1054 
%1071:	sext	%1070 
%1072:	icmp	%1071 XXX 
%1073:	br	%1072 if.end208 land.lhs.true201 

BASIC BLOCK land.lhs.true201
%1074:	getelementptr	%1054 XXX 
%1075:	load	%1074 
%1076:	sext	%1075 
%1077:	icmp	%1076 XXX 
%1078:	br	%1077 if.end208 if.then206 

BASIC BLOCK if.then206
%1079:	getelementptr	%1054 XXX 
%1080:	call	XXX XXX XXX XXX llvm.dbg.value 
%1081:	br	if.end208 

BASIC BLOCK if.end208
%1082:	phi	%1079 %1054 %1054 
%1083:	load	%1082 
%1084:	sext	%1083 
%1085:	icmp	%1084 XXX 
%1086:	br	%1085 if.end213 if.then212 

BASIC BLOCK if.then212
%1087:	br	for.end241 

BASIC BLOCK if.end213
%1088:	br	if.end214 

BASIC BLOCK if.end214
%1089:	phi	%1082 %1046 
%1090:	load	%1089 
%1091:	sext	%1090 
%1092:	getelementptr	is_printf_convspec XXX %1091 
%1093:	load	%1092 
%1094:	icmp	%1093 XXX 
%1095:	br	%1094 if.end237 if.then218 

BASIC BLOCK if.then218
%1096:	add	%1047 XXX 
%1097:	call	XXX XXX XXX XXX llvm.dbg.value 
%1098:	icmp	%791 XXX 
%1099:	br	%1098 if.else224 if.then221 

BASIC BLOCK if.then221
%1100:	call	%791 atoi 
%1101:	sub	%1100 XXX 
%1102:	mul	%1101 XXX 
%1103:	getelementptr	ap %1102 
%1104:	bitcast	%1103 
%1105:	load	%1104 
%1106:	call	XXX XXX XXX XXX llvm.dbg.value 
%1107:	br	if.end227 

BASIC BLOCK if.else224
%1108:	mul	%1096 XXX 
%1109:	getelementptr	ap %1108 
%1110:	bitcast	%1109 
%1111:	load	%1110 
%1112:	call	XXX XXX XXX XXX llvm.dbg.value 
%1113:	br	if.end227 

BASIC BLOCK if.end227
%1114:	phi	%1105 %1111 
%1115:	load	%1089 
%1116:	sext	%1115 
%1117:	icmp	%1116 XXX 
%1118:	br	%1117 if.end236 if.then231 

BASIC BLOCK if.then231
%1119:	call	%1114 _libsafe_raVariableP 
%1120:	icmp	%1119 XXX 
%1121:	br	%1120 if.end235 if.then234 

BASIC BLOCK if.then234
%1122:	call	XXX _libsafe_die 
%1123:	br	if.end235 

BASIC BLOCK if.end235
%1124:	br	if.end236 

BASIC BLOCK if.end236
%1125:	br	if.end237 

BASIC BLOCK if.end237
%1126:	phi	%1096 %1047 
%1127:	br	if.end238 

BASIC BLOCK if.end238
%1128:	phi	%1089 %777 
%1129:	phi	%1126 %778 
%1130:	br	for.inc239 

BASIC BLOCK for.inc239
%1131:	phi	%1128 %1005 %912 %836 
%1132:	phi	%1129 %1003 %910 %834 
%1133:	getelementptr	%1131 XXX 
%1134:	call	XXX XXX XXX XXX llvm.dbg.value 
%1135:	br	for.cond 

BASIC BLOCK for.end241
%1136:	load	_IO_vfprintf.real_vfprintf 
%1137:	call	fp format ap %1136 
%1138:	call	XXX XXX XXX XXX llvm.dbg.value 
%1139:	br	return 

BASIC BLOCK return
%1140:	phi	%772 %1137 
%1141:	ret	%1140 

FUNCTION sprintf

BASIC BLOCK entry
%1142:	alloca	XXX 
%1143:	call	XXX XXX XXX XXX llvm.dbg.value 
%1144:	call	XXX XXX XXX XXX llvm.dbg.value 
%1145:	call	XXX XXX XXX llvm.dbg.declare 
%1146:	load	sprintf.real_vsprintf 
%1147:	icmp	%1146 XXX 
%1148:	br	%1147 if.then if.end 

BASIC BLOCK if.then
%1149:	call	XXX getLibraryFunction 
%1150:	bitcast	%1149 
%1151:	store	%1150 sprintf.real_vsprintf 
%1152:	br	if.end 

BASIC BLOCK if.end
%1153:	load	sprintf.real_vsnprintf 
%1154:	icmp	%1153 XXX 
%1155:	br	%1154 if.then2 if.end4 

BASIC BLOCK if.then2
%1156:	call	XXX getLibraryFunction 
%1157:	bitcast	%1156 
%1158:	store	%1157 sprintf.real_vsnprintf 
%1159:	br	if.end4 

BASIC BLOCK if.end4
%1160:	load	_libsafe_exclude 
%1161:	icmp	%1160 XXX 
%1162:	br	%1161 if.end10 if.then6 

BASIC BLOCK if.then6
%1163:	bitcast	%1142 
%1164:	call	%1163 llvm.va_start 
%1165:	load	sprintf.real_vsprintf 
%1166:	load	%1142 
%1167:	call	str format %1166 %1165 
%1168:	call	XXX XXX XXX XXX llvm.dbg.value 
%1169:	bitcast	%1142 
%1170:	call	%1169 llvm.va_end 
%1171:	br	return 

BASIC BLOCK if.end10
%1172:	call	str _libsafe_stackVariableP 
%1173:	call	XXX XXX XXX XXX llvm.dbg.value 
%1174:	icmp	%1172 XXX 
%1175:	br	%1174 if.end16 if.then12 

BASIC BLOCK if.then12
%1176:	bitcast	%1142 
%1177:	call	%1176 llvm.va_start 
%1178:	load	sprintf.real_vsprintf 
%1179:	load	%1142 
%1180:	call	str format %1179 %1178 
%1181:	call	XXX XXX XXX XXX llvm.dbg.value 
%1182:	bitcast	%1142 
%1183:	call	%1182 llvm.va_end 
%1184:	br	return 

BASIC BLOCK if.end16
%1185:	bitcast	%1142 
%1186:	call	%1185 llvm.va_start 
%1187:	load	sprintf.real_vsnprintf 
%1188:	load	%1142 
%1189:	call	str %1172 format %1188 %1187 
%1190:	call	XXX XXX XXX XXX llvm.dbg.value 
%1191:	icmp	%1189 XXX 
%1192:	br	%1191 lor.lhs.false if.then21 

BASIC BLOCK lor.lhs.false
%1193:	sub	%1172 XXX 
%1194:	icmp	%1189 %1193 
%1195:	br	%1194 if.end22 if.then21 

BASIC BLOCK if.then21
%1196:	call	XXX _libsafe_die 
%1197:	br	if.end22 

BASIC BLOCK if.end22
%1198:	bitcast	%1142 
%1199:	call	%1198 llvm.va_end 
%1200:	br	return 

BASIC BLOCK return
%1201:	phi	%1167 %1180 %1189 
%1202:	ret	%1201 

FUNCTION llvm.va_start

FUNCTION llvm.va_end

FUNCTION snprintf

BASIC BLOCK entry
%1203:	alloca	XXX 
%1204:	call	XXX XXX XXX XXX llvm.dbg.value 
%1205:	call	XXX XXX XXX XXX llvm.dbg.value 
%1206:	call	XXX XXX XXX XXX llvm.dbg.value 
%1207:	call	XXX XXX XXX llvm.dbg.declare 
%1208:	load	snprintf.real_vsnprintf 
%1209:	icmp	%1208 XXX 
%1210:	br	%1209 if.then if.end 

BASIC BLOCK if.then
%1211:	call	XXX getLibraryFunction 
%1212:	bitcast	%1211 
%1213:	store	%1212 snprintf.real_vsnprintf 
%1214:	br	if.end 

BASIC BLOCK if.end
%1215:	load	_libsafe_exclude 
%1216:	icmp	%1215 XXX 
%1217:	br	%1216 if.end6 if.then2 

BASIC BLOCK if.then2
%1218:	bitcast	%1203 
%1219:	call	%1218 llvm.va_start 
%1220:	load	snprintf.real_vsnprintf 
%1221:	load	%1203 
%1222:	call	str size format %1221 %1220 
%1223:	call	XXX XXX XXX XXX llvm.dbg.value 
%1224:	bitcast	%1203 
%1225:	call	%1224 llvm.va_end 
%1226:	br	return 

BASIC BLOCK if.end6
%1227:	call	str _libsafe_stackVariableP 
%1228:	call	XXX XXX XXX XXX llvm.dbg.value 
%1229:	icmp	%1227 XXX 
%1230:	br	%1229 if.end12 if.then8 

BASIC BLOCK if.then8
%1231:	bitcast	%1203 
%1232:	call	%1231 llvm.va_start 
%1233:	load	snprintf.real_vsnprintf 
%1234:	load	%1203 
%1235:	call	str size format %1234 %1233 
%1236:	call	XXX XXX XXX XXX llvm.dbg.value 
%1237:	bitcast	%1203 
%1238:	call	%1237 llvm.va_end 
%1239:	br	return 

BASIC BLOCK if.end12
%1240:	bitcast	%1203 
%1241:	call	%1240 llvm.va_start 
%1242:	load	snprintf.real_vsnprintf 
%1243:	load	%1203 
%1244:	call	str size format %1243 %1242 
%1245:	call	XXX XXX XXX XXX llvm.dbg.value 
%1246:	icmp	%1244 XXX 
%1247:	br	%1246 lor.lhs.false land.lhs.true 

BASIC BLOCK lor.lhs.false
%1248:	sub	%1227 XXX 
%1249:	icmp	%1244 %1248 
%1250:	br	%1249 if.end19 land.lhs.true 

BASIC BLOCK land.lhs.true
%1251:	icmp	size %1227 
%1252:	br	%1251 if.end19 if.then18 

BASIC BLOCK if.then18
%1253:	call	XXX _libsafe_die 
%1254:	br	if.end19 

BASIC BLOCK if.end19
%1255:	bitcast	%1203 
%1256:	call	%1255 llvm.va_end 
%1257:	br	return 

BASIC BLOCK return
%1258:	phi	%1222 %1235 %1244 
%1259:	ret	%1258 

FUNCTION vsprintf

BASIC BLOCK entry
%1260:	call	XXX XXX XXX XXX llvm.dbg.value 
%1261:	call	XXX XXX XXX XXX llvm.dbg.value 
%1262:	call	XXX XXX XXX XXX llvm.dbg.value 
%1263:	load	vsprintf.real_vsprintf 
%1264:	icmp	%1263 XXX 
%1265:	br	%1264 if.then if.end 

BASIC BLOCK if.then
%1266:	call	XXX getLibraryFunction 
%1267:	bitcast	%1266 
%1268:	store	%1267 vsprintf.real_vsprintf 
%1269:	br	if.end 

BASIC BLOCK if.end
%1270:	load	vsprintf.real_vsnprintf 
%1271:	icmp	%1270 XXX 
%1272:	br	%1271 if.then2 if.end4 

BASIC BLOCK if.then2
%1273:	call	XXX getLibraryFunction 
%1274:	bitcast	%1273 
%1275:	store	%1274 vsprintf.real_vsnprintf 
%1276:	br	if.end4 

BASIC BLOCK if.end4
%1277:	load	_libsafe_exclude 
%1278:	icmp	%1277 XXX 
%1279:	br	%1278 if.end8 if.then6 

BASIC BLOCK if.then6
%1280:	load	vsprintf.real_vsprintf 
%1281:	call	str format ap %1280 
%1282:	br	return 

BASIC BLOCK if.end8
%1283:	call	str _libsafe_stackVariableP 
%1284:	call	XXX XXX XXX XXX llvm.dbg.value 
%1285:	icmp	%1283 XXX 
%1286:	br	%1285 if.end12 if.then10 

BASIC BLOCK if.then10
%1287:	load	vsprintf.real_vsprintf 
%1288:	call	str format ap %1287 
%1289:	br	return 

BASIC BLOCK if.end12
%1290:	load	vsprintf.real_vsnprintf 
%1291:	call	str %1283 format ap %1290 
%1292:	call	XXX XXX XXX XXX llvm.dbg.value 
%1293:	icmp	%1291 XXX 
%1294:	br	%1293 lor.lhs.false if.then16 

BASIC BLOCK lor.lhs.false
%1295:	sub	%1283 XXX 
%1296:	icmp	%1291 %1295 
%1297:	br	%1296 if.end17 if.then16 

BASIC BLOCK if.then16
%1298:	call	XXX _libsafe_die 
%1299:	br	if.end17 

BASIC BLOCK if.end17
%1300:	br	return 

BASIC BLOCK return
%1301:	phi	%1281 %1288 %1291 
%1302:	ret	%1301 

FUNCTION vsnprintf

BASIC BLOCK entry
%1303:	call	XXX XXX XXX XXX llvm.dbg.value 
%1304:	call	XXX XXX XXX XXX llvm.dbg.value 
%1305:	call	XXX XXX XXX XXX llvm.dbg.value 
%1306:	call	XXX XXX XXX XXX llvm.dbg.value 
%1307:	load	vsnprintf.real_vsnprintf 
%1308:	icmp	%1307 XXX 
%1309:	br	%1308 if.then if.end 

BASIC BLOCK if.then
%1310:	call	XXX getLibraryFunction 
%1311:	bitcast	%1310 
%1312:	store	%1311 vsnprintf.real_vsnprintf 
%1313:	br	if.end 

BASIC BLOCK if.end
%1314:	load	_libsafe_exclude 
%1315:	icmp	%1314 XXX 
%1316:	br	%1315 if.end4 if.then2 

BASIC BLOCK if.then2
%1317:	load	vsnprintf.real_vsnprintf 
%1318:	call	str size format ap %1317 
%1319:	br	return 

BASIC BLOCK if.end4
%1320:	call	str _libsafe_stackVariableP 
%1321:	call	XXX XXX XXX XXX llvm.dbg.value 
%1322:	icmp	%1320 XXX 
%1323:	br	%1322 if.end8 if.then6 

BASIC BLOCK if.then6
%1324:	load	vsnprintf.real_vsnprintf 
%1325:	call	str size format ap %1324 
%1326:	br	return 

BASIC BLOCK if.end8
%1327:	load	vsnprintf.real_vsnprintf 
%1328:	call	str size format ap %1327 
%1329:	call	XXX XXX XXX XXX llvm.dbg.value 
%1330:	icmp	%1328 XXX 
%1331:	br	%1330 lor.lhs.false land.lhs.true 

BASIC BLOCK lor.lhs.false
%1332:	sub	%1320 XXX 
%1333:	icmp	%1328 %1332 
%1334:	br	%1333 if.end14 land.lhs.true 

BASIC BLOCK land.lhs.true
%1335:	icmp	size %1320 
%1336:	br	%1335 if.end14 if.then13 

BASIC BLOCK if.then13
%1337:	call	XXX _libsafe_die 
%1338:	br	if.end14 

BASIC BLOCK if.end14
%1339:	br	return 

BASIC BLOCK return
%1340:	phi	%1318 %1325 %1328 
%1341:	ret	%1340 

FUNCTION getwd

BASIC BLOCK entry
%1342:	call	XXX XXX XXX XXX llvm.dbg.value 
%1343:	load	getwd.real_getwd 
%1344:	icmp	%1343 XXX 
%1345:	br	%1344 if.then if.end 

BASIC BLOCK if.then
%1346:	call	XXX getLibraryFunction 
%1347:	bitcast	%1346 
%1348:	store	%1347 getwd.real_getwd 
%1349:	br	if.end 

BASIC BLOCK if.end
%1350:	load	_libsafe_exclude 
%1351:	icmp	%1350 XXX 
%1352:	br	%1351 if.end4 if.then2 

BASIC BLOCK if.then2
%1353:	load	getwd.real_getwd 
%1354:	call	buf %1353 
%1355:	br	return 

BASIC BLOCK if.end4
%1356:	call	buf _libsafe_stackVariableP 
%1357:	call	XXX XXX XXX XXX llvm.dbg.value 
%1358:	icmp	%1356 XXX 
%1359:	br	%1358 if.end8 if.then6 

BASIC BLOCK if.then6
%1360:	load	getwd.real_getwd 
%1361:	call	buf %1360 
%1362:	br	return 

BASIC BLOCK if.end8
%1363:	call	buf XXX getcwd 
%1364:	call	XXX XXX XXX XXX llvm.dbg.value 
%1365:	call	buf strlen 
%1366:	add	%1365 XXX 
%1367:	icmp	%1366 %1356 
%1368:	br	%1367 if.end13 if.then12 

BASIC BLOCK if.then12
%1369:	call	XXX _libsafe_die 
%1370:	br	if.end13 

BASIC BLOCK if.end13
%1371:	br	return 

BASIC BLOCK return
%1372:	phi	%1354 %1361 %1363 
%1373:	ret	%1372 

FUNCTION getcwd

FUNCTION strlen

FUNCTION gets

BASIC BLOCK entry
%1374:	call	XXX XXX XXX XXX llvm.dbg.value 
%1375:	load	gets.real_gets 
%1376:	icmp	%1375 XXX 
%1377:	br	%1376 if.then if.end 

BASIC BLOCK if.then
%1378:	call	XXX getLibraryFunction 
%1379:	bitcast	%1378 
%1380:	store	%1379 gets.real_gets 
%1381:	br	if.end 

BASIC BLOCK if.end
%1382:	load	_libsafe_exclude 
%1383:	icmp	%1382 XXX 
%1384:	br	%1383 if.end4 if.then2 

BASIC BLOCK if.then2
%1385:	load	gets.real_gets 
%1386:	call	s %1385 
%1387:	br	return 

BASIC BLOCK if.end4
%1388:	call	s _libsafe_stackVariableP 
%1389:	call	XXX XXX XXX XXX llvm.dbg.value 
%1390:	icmp	%1388 XXX 
%1391:	br	%1390 if.end8 if.then6 

BASIC BLOCK if.then6
%1392:	load	gets.real_gets 
%1393:	call	s %1392 
%1394:	br	return 

BASIC BLOCK if.end8
%1395:	load	stdin 
%1396:	call	s %1388 %1395 fgets 
%1397:	call	s strlen 
%1398:	call	XXX XXX XXX XXX llvm.dbg.value 
%1399:	sub	%1397 XXX 
%1400:	getelementptr	s %1399 
%1401:	load	%1400 
%1402:	sext	%1401 
%1403:	icmp	%1402 XXX 
%1404:	br	%1403 if.end16 if.then13 

BASIC BLOCK if.then13
%1405:	sub	%1397 XXX 
%1406:	getelementptr	s %1405 
%1407:	store	XXX %1406 
%1408:	br	if.end16 

BASIC BLOCK if.end16
%1409:	br	return 

BASIC BLOCK return
%1410:	phi	%1386 %1393 s 
%1411:	ret	%1410 

FUNCTION fgets

FUNCTION realpath

BASIC BLOCK entry
%1412:	alloca	XXX 
%1413:	call	XXX XXX XXX XXX llvm.dbg.value 
%1414:	call	XXX XXX XXX XXX llvm.dbg.value 
%1415:	call	XXX XXX XXX llvm.dbg.declare 
%1416:	load	real_memcpy 
%1417:	icmp	%1416 XXX 
%1418:	br	%1417 if.then if.end 

BASIC BLOCK if.then
%1419:	call	XXX getLibraryFunction 
%1420:	bitcast	%1419 
%1421:	store	%1420 real_memcpy 
%1422:	br	if.end 

BASIC BLOCK if.end
%1423:	load	realpath.real_realpath 
%1424:	icmp	%1423 XXX 
%1425:	br	%1424 if.then2 if.end4 

BASIC BLOCK if.then2
%1426:	call	XXX getLibraryFunction 
%1427:	bitcast	%1426 
%1428:	store	%1427 realpath.real_realpath 
%1429:	br	if.end4 

BASIC BLOCK if.end4
%1430:	load	_libsafe_exclude 
%1431:	icmp	%1430 XXX 
%1432:	br	%1431 if.end8 if.then6 

BASIC BLOCK if.then6
%1433:	load	realpath.real_realpath 
%1434:	call	path resolved_path %1433 
%1435:	br	return 

BASIC BLOCK if.end8
%1436:	call	resolved_path _libsafe_stackVariableP 
%1437:	call	XXX XXX XXX XXX llvm.dbg.value 
%1438:	icmp	%1436 XXX 
%1439:	br	%1438 if.end12 if.then10 

BASIC BLOCK if.then10
%1440:	load	realpath.real_realpath 
%1441:	call	path resolved_path %1440 
%1442:	br	return 

BASIC BLOCK if.end12
%1443:	load	realpath.real_realpath 
%1444:	getelementptr	%1412 XXX XXX 
%1445:	call	path %1444 %1443 
%1446:	call	XXX XXX XXX XXX llvm.dbg.value 
%1447:	getelementptr	%1412 XXX XXX 
%1448:	call	%1447 %1436 strnlen 
%1449:	call	XXX XXX XXX XXX llvm.dbg.value 
%1450:	icmp	%1448 %1436 
%1451:	br	%1450 if.end18 if.then17 

BASIC BLOCK if.then17
%1452:	call	XXX _libsafe_die 
%1453:	br	if.end18 

BASIC BLOCK if.end18
%1454:	load	real_memcpy 
%1455:	getelementptr	%1412 XXX XXX 
%1456:	add	%1448 XXX 
%1457:	call	resolved_path %1455 %1456 %1454 
%1458:	icmp	%1445 XXX 
%1459:	br	%1458 cond.false cond.true 

BASIC BLOCK cond.true
%1460:	br	cond.end 

BASIC BLOCK cond.false
%1461:	br	cond.end 

BASIC BLOCK cond.end
%1462:	phi	XXX resolved_path 
%1463:	br	return 

BASIC BLOCK return
%1464:	phi	%1434 %1441 %1462 
%1465:	ret	%1464 

FUNCTION _IO_vfscanf

BASIC BLOCK entry
%1466:	alloca	XXX 
%1467:	alloca	XXX 
%1468:	call	XXX XXX XXX XXX llvm.dbg.value 
%1469:	call	XXX XXX XXX XXX llvm.dbg.value 
%1470:	call	XXX XXX XXX XXX llvm.dbg.value 
%1471:	call	XXX XXX XXX XXX llvm.dbg.value 
%1472:	call	XXX XXX XXX llvm.dbg.declare 
%1473:	call	XXX XXX XXX llvm.dbg.declare 
%1474:	load	_IO_vfscanf.real_IO_vfscanf 
%1475:	icmp	%1474 XXX 
%1476:	br	%1475 if.then if.end 

BASIC BLOCK if.then
%1477:	call	XXX getLibraryFunction 
%1478:	bitcast	%1477 
%1479:	store	%1478 _IO_vfscanf.real_IO_vfscanf 
%1480:	br	if.end 

BASIC BLOCK if.end
%1481:	load	_libsafe_exclude 
%1482:	icmp	%1481 XXX 
%1483:	br	%1482 if.end4 if.then2 

BASIC BLOCK if.then2
%1484:	load	_IO_vfscanf.real_IO_vfscanf 
%1485:	call	s format argptr errp %1484 
%1486:	br	return 

BASIC BLOCK if.end4
%1487:	getelementptr	%1466 XXX XXX 
%1488:	getelementptr	%1467 XXX XXX 
%1489:	call	XXX %1487 %1488 _libsafe_save_ra_fp 
%1490:	call	XXX XXX XXX XXX llvm.dbg.value 
%1491:	load	_IO_vfscanf.real_IO_vfscanf 
%1492:	call	s format argptr errp %1491 
%1493:	call	XXX XXX XXX XXX llvm.dbg.value 
%1494:	icmp	%1489 XXX 
%1495:	br	%1494 if.end13 land.lhs.true 

BASIC BLOCK land.lhs.true
%1496:	getelementptr	%1466 XXX XXX 
%1497:	getelementptr	%1467 XXX XXX 
%1498:	call	%1489 %1496 %1497 _libsafe_verify_ra_fp 
%1499:	icmp	%1498 XXX 
%1500:	br	%1499 if.end13 if.then12 

BASIC BLOCK if.then12
%1501:	call	XXX _libsafe_die 
%1502:	br	if.end13 

BASIC BLOCK if.end13
%1503:	br	return 

BASIC BLOCK return
%1504:	phi	%1485 %1492 
%1505:	ret	%1504 

FUNCTION _libsafe_save_ra_fp

FUNCTION _libsafe_verify_ra_fp

FUNCTION _intercept_init

BASIC BLOCK entry
%1506:	alloca	XXX 
%1507:	alloca	XXX 
%1508:	call	XXX XXX XXX llvm.dbg.declare 
%1509:	call	XXX XXX XXX llvm.dbg.declare 
%1510:	getelementptr	%1506 XXX XXX 
%1511:	call	%1510 XXX get_exename 
%1512:	call	XXX XXX fopen 
%1513:	call	XXX XXX XXX XXX llvm.dbg.value 
%1514:	icmp	%1512 XXX 
%1515:	br	%1514 if.end21 if.then 

BASIC BLOCK if.then
%1516:	br	while.cond 

BASIC BLOCK while.cond
%1517:	getelementptr	%1507 XXX XXX 
%1518:	call	%1517 XXX %1512 fgets 
%1519:	icmp	%1518 XXX 
%1520:	br	%1519 while.end while.body 

BASIC BLOCK while.body
%1521:	getelementptr	%1507 XXX XXX 
%1522:	call	%1521 XXX strnlen 
%1523:	sub	%1522 XXX 
%1524:	getelementptr	%1507 XXX %1523 
%1525:	store	XXX %1524 
%1526:	getelementptr	%1507 XXX XXX 
%1527:	getelementptr	%1506 XXX XXX 
%1528:	call	%1526 %1527 XXX strncmp 
%1529:	icmp	%1528 XXX 
%1530:	br	%1529 if.then10 if.end 

BASIC BLOCK if.then10
%1531:	store	XXX _libsafe_exclude 
%1532:	br	if.end 

BASIC BLOCK if.end
%1533:	getelementptr	%1507 XXX XXX 
%1534:	call	%1533 XXX XXX strncmp 
%1535:	icmp	%1534 XXX 
%1536:	br	%1535 if.then14 if.end19 

BASIC BLOCK if.then14
%1537:	call	geteuid 
%1538:	icmp	%1537 XXX 
%1539:	br	%1538 if.end18 if.then17 

BASIC BLOCK if.then17
%1540:	store	XXX _libsafe_exclude 
%1541:	br	if.end18 

BASIC BLOCK if.end18
%1542:	br	if.end19 

BASIC BLOCK if.end19
%1543:	br	while.cond 

BASIC BLOCK while.end
%1544:	call	%1512 fclose 
%1545:	br	if.end21 

BASIC BLOCK if.end21
%1546:	ret	

FUNCTION get_exename

BASIC BLOCK entry
%1547:	call	XXX XXX XXX XXX llvm.dbg.value 
%1548:	call	XXX XXX XXX XXX llvm.dbg.value 
%1549:	sub	size XXX 
%1550:	call	XXX exename %1549 readlink 
%1551:	call	XXX XXX XXX XXX llvm.dbg.value 
%1552:	icmp	%1550 XXX 
%1553:	br	%1552 if.else if.then 

BASIC BLOCK if.then
%1554:	getelementptr	exename XXX 
%1555:	store	XXX %1554 
%1556:	br	if.end 

BASIC BLOCK if.else
%1557:	getelementptr	exename %1550 
%1558:	store	XXX %1557 
%1559:	br	if.end 

BASIC BLOCK if.end
%1560:	ret	exename 

FUNCTION fopen

FUNCTION strncmp

FUNCTION geteuid

FUNCTION fclose

FUNCTION _intercept_fini

BASIC BLOCK entry
%1561:	ret	

FUNCTION readlink

FUNCTION dlsym

FUNCTION fprintf

FUNCTION dlerror

FUNCTION _exit

FUNCTION llvm.dbg.value
