make[1]: warning: jobserver unavailable: using -j1.  Add `+' to parent make rule.

FUNCTION strcpy

BASIC BLOCK entry
%1:	call	XXX XXX XXX XXX llvm.dbg.value 
%2:	call	XXX XXX XXX XXX llvm.dbg.value 
%3:	load	real_memcpy 
%4:	icmp	%3 XXX 
%5:	br	%4 if.then if.end 

BASIC BLOCK if.then
%6:	call	XXX getLibraryFunction 
%7:	bitcast	%6 
%8:	store	%7 real_memcpy 
%9:	br	if.end 

BASIC BLOCK if.end
%10:	load	strcpy.real_strcpy 
%11:	icmp	%10 XXX 
%12:	br	%11 if.then2 if.end4 

BASIC BLOCK if.then2
%13:	call	XXX getLibraryFunction 
%14:	bitcast	%13 
%15:	store	%14 strcpy.real_strcpy 
%16:	br	if.end4 

BASIC BLOCK if.end4
%17:	load	_libsafe_exclude 
%18:	icmp	%17 XXX 
%19:	br	%18 if.end8 if.then6 

BASIC BLOCK if.then6
%20:	load	strcpy.real_strcpy 
%21:	call	dest src %20 
%22:	br	return 

BASIC BLOCK if.end8
%23:	call	dest _libsafe_stackVariableP 
%24:	call	XXX XXX XXX XXX llvm.dbg.value 
%25:	icmp	%23 XXX 
%26:	br	%25 if.end12 if.then10 

BASIC BLOCK if.then10
%27:	load	strcpy.real_strcpy 
%28:	call	dest src %27 
%29:	br	return 

BASIC BLOCK if.end12
%30:	call	src %23 strnlen 
%31:	call	XXX XXX XXX XXX llvm.dbg.value 
%32:	icmp	%30 %23 
%33:	br	%32 if.end16 if.then15 

BASIC BLOCK if.then15
%34:	call	XXX _libsafe_die 
%35:	br	if.end16 

BASIC BLOCK if.end16
%36:	load	real_memcpy 
%37:	add	%30 XXX 
%38:	call	dest src %37 %36 
%39:	br	return 

BASIC BLOCK return
%40:	phi	%21 %28 dest 
%41:	ret	%40 

FUNCTION llvm.dbg.declare

FUNCTION strnlen

FUNCTION strncpy

BASIC BLOCK entry
%42:	call	XXX XXX XXX XXX llvm.dbg.value 
%43:	call	XXX XXX XXX XXX llvm.dbg.value 
%44:	call	XXX XXX XXX XXX llvm.dbg.value 
%45:	load	strncpy.real_strncpy 
%46:	icmp	%45 XXX 
%47:	br	%46 if.then if.end 

BASIC BLOCK if.then
%48:	call	XXX getLibraryFunction 
%49:	bitcast	%48 
%50:	store	%49 strncpy.real_strncpy 
%51:	br	if.end 

BASIC BLOCK if.end
%52:	load	_libsafe_exclude 
%53:	icmp	%52 XXX 
%54:	br	%53 if.end4 if.then2 

BASIC BLOCK if.then2
%55:	load	strncpy.real_strncpy 
%56:	call	dest src n %55 
%57:	br	return 

BASIC BLOCK if.end4
%58:	call	dest _libsafe_stackVariableP 
%59:	call	XXX XXX XXX XXX llvm.dbg.value 
%60:	icmp	%58 XXX 
%61:	br	%60 if.end8 if.then6 

BASIC BLOCK if.then6
%62:	load	strncpy.real_strncpy 
%63:	call	dest src n %62 
%64:	br	return 

BASIC BLOCK if.end8
%65:	icmp	n %58 
%66:	br	%65 if.end13 land.lhs.true 

BASIC BLOCK land.lhs.true
%67:	call	src %58 strnlen 
%68:	call	XXX XXX XXX XXX llvm.dbg.value 
%69:	icmp	%67 %58 
%70:	br	%69 if.end13 if.then12 

BASIC BLOCK if.then12
%71:	call	XXX _libsafe_die 
%72:	br	if.end13 

BASIC BLOCK if.end13
%73:	load	strncpy.real_strncpy 
%74:	call	dest src n %73 
%75:	br	return 

BASIC BLOCK return
%76:	phi	%56 %63 %74 
%77:	ret	%76 

FUNCTION stpcpy

BASIC BLOCK entry
%78:	call	XXX XXX XXX XXX llvm.dbg.value 
%79:	call	XXX XXX XXX XXX llvm.dbg.value 
%80:	load	real_memcpy 
%81:	icmp	%80 XXX 
%82:	br	%81 if.then if.end 

BASIC BLOCK if.then
%83:	call	XXX getLibraryFunction 
%84:	bitcast	%83 
%85:	store	%84 real_memcpy 
%86:	br	if.end 

BASIC BLOCK if.end
%87:	load	stpcpy.real_stpcpy 
%88:	icmp	%87 XXX 
%89:	br	%88 if.then2 if.end4 

BASIC BLOCK if.then2
%90:	call	XXX getLibraryFunction 
%91:	bitcast	%90 
%92:	store	%91 stpcpy.real_stpcpy 
%93:	br	if.end4 

BASIC BLOCK if.end4
%94:	load	_libsafe_exclude 
%95:	icmp	%94 XXX 
%96:	br	%95 if.end8 if.then6 

BASIC BLOCK if.then6
%97:	load	stpcpy.real_stpcpy 
%98:	call	dest src %97 
%99:	br	return 

BASIC BLOCK if.end8
%100:	call	dest _libsafe_stackVariableP 
%101:	call	XXX XXX XXX XXX llvm.dbg.value 
%102:	icmp	%100 XXX 
%103:	br	%102 if.end12 if.then10 

BASIC BLOCK if.then10
%104:	load	stpcpy.real_stpcpy 
%105:	call	dest src %104 
%106:	br	return 

BASIC BLOCK if.end12
%107:	call	src %100 strnlen 
%108:	call	XXX XXX XXX XXX llvm.dbg.value 
%109:	icmp	%107 %100 
%110:	br	%109 if.end16 if.then15 

BASIC BLOCK if.then15
%111:	call	XXX _libsafe_die 
%112:	br	if.end16 

BASIC BLOCK if.end16
%113:	load	real_memcpy 
%114:	add	%107 XXX 
%115:	call	dest src %114 %113 
%116:	getelementptr	dest %107 
%117:	br	return 

BASIC BLOCK return
%118:	phi	%98 %105 %116 
%119:	ret	%118 

FUNCTION wcscpy

BASIC BLOCK entry
%120:	call	XXX XXX XXX XXX llvm.dbg.value 
%121:	call	XXX XXX XXX XXX llvm.dbg.value 
%122:	load	wcscpy.real_wcscpy 
%123:	icmp	%122 XXX 
%124:	br	%123 if.then if.end 

BASIC BLOCK if.then
%125:	call	XXX getLibraryFunction 
%126:	bitcast	%125 
%127:	store	%126 wcscpy.real_wcscpy 
%128:	br	if.end 

BASIC BLOCK if.end
%129:	load	_libsafe_exclude 
%130:	icmp	%129 XXX 
%131:	br	%130 if.end4 if.then2 

BASIC BLOCK if.then2
%132:	load	wcscpy.real_wcscpy 
%133:	call	dest src %132 
%134:	br	return 

BASIC BLOCK if.end4
%135:	bitcast	dest 
%136:	call	%135 _libsafe_stackVariableP 
%137:	call	XXX XXX XXX XXX llvm.dbg.value 
%138:	icmp	%136 XXX 
%139:	br	%138 if.end8 if.then6 

BASIC BLOCK if.then6
%140:	load	wcscpy.real_wcscpy 
%141:	call	dest src %140 
%142:	br	return 

BASIC BLOCK if.end8
%143:	udiv	%136 XXX 
%144:	call	XXX XXX XXX XXX llvm.dbg.value 
%145:	call	src %143 wcsnlen 
%146:	call	XXX XXX XXX XXX llvm.dbg.value 
%147:	icmp	%145 %143 
%148:	br	%147 if.end12 if.then11 

BASIC BLOCK if.then11
%149:	call	XXX _libsafe_die 
%150:	br	if.end12 

BASIC BLOCK if.end12
%151:	load	wcscpy.real_wcscpy 
%152:	call	dest src %151 
%153:	br	return 

BASIC BLOCK return
%154:	phi	%133 %141 %152 
%155:	ret	%154 

FUNCTION wcsnlen

FUNCTION wcpcpy

BASIC BLOCK entry
%156:	call	XXX XXX XXX XXX llvm.dbg.value 
%157:	call	XXX XXX XXX XXX llvm.dbg.value 
%158:	load	wcpcpy.real_wcpcpy 
%159:	icmp	%158 XXX 
%160:	br	%159 if.then if.end 

BASIC BLOCK if.then
%161:	call	XXX getLibraryFunction 
%162:	bitcast	%161 
%163:	store	%162 wcpcpy.real_wcpcpy 
%164:	br	if.end 

BASIC BLOCK if.end
%165:	load	_libsafe_exclude 
%166:	icmp	%165 XXX 
%167:	br	%166 if.end4 if.then2 

BASIC BLOCK if.then2
%168:	load	wcpcpy.real_wcpcpy 
%169:	call	dest src %168 
%170:	br	return 

BASIC BLOCK if.end4
%171:	bitcast	dest 
%172:	call	%171 _libsafe_stackVariableP 
%173:	call	XXX XXX XXX XXX llvm.dbg.value 
%174:	icmp	%172 XXX 
%175:	br	%174 if.end8 if.then6 

BASIC BLOCK if.then6
%176:	load	wcpcpy.real_wcpcpy 
%177:	call	dest src %176 
%178:	br	return 

BASIC BLOCK if.end8
%179:	udiv	%172 XXX 
%180:	call	XXX XXX XXX XXX llvm.dbg.value 
%181:	call	src %179 wcsnlen 
%182:	call	XXX XXX XXX XXX llvm.dbg.value 
%183:	icmp	%181 %179 
%184:	br	%183 if.end12 if.then11 

BASIC BLOCK if.then11
%185:	call	XXX _libsafe_die 
%186:	br	if.end12 

BASIC BLOCK if.end12
%187:	load	wcpcpy.real_wcpcpy 
%188:	call	dest src %187 
%189:	br	return 

BASIC BLOCK return
%190:	phi	%169 %177 %188 
%191:	ret	%190 

FUNCTION memcpy

BASIC BLOCK entry
%192:	call	XXX XXX XXX XXX llvm.dbg.value 
%193:	call	XXX XXX XXX XXX llvm.dbg.value 
%194:	call	XXX XXX XXX XXX llvm.dbg.value 
%195:	load	real_memcpy 
%196:	icmp	%195 XXX 
%197:	br	%196 if.then if.end 

BASIC BLOCK if.then
%198:	call	XXX getLibraryFunction 
%199:	bitcast	%198 
%200:	store	%199 real_memcpy 
%201:	br	if.end 

BASIC BLOCK if.end
%202:	load	_libsafe_exclude 
%203:	icmp	%202 XXX 
%204:	br	%203 if.end4 if.then2 

BASIC BLOCK if.then2
%205:	load	real_memcpy 
%206:	call	dest src n %205 
%207:	br	return 

BASIC BLOCK if.end4
%208:	call	dest _libsafe_stackVariableP 
%209:	call	XXX XXX XXX XXX llvm.dbg.value 
%210:	icmp	%208 XXX 
%211:	br	%210 if.end8 if.then6 

BASIC BLOCK if.then6
%212:	load	real_memcpy 
%213:	call	dest src n %212 
%214:	br	return 

BASIC BLOCK if.end8
%215:	icmp	n %208 
%216:	br	%215 if.end11 if.then10 

BASIC BLOCK if.then10
%217:	call	XXX _libsafe_die 
%218:	br	if.end11 

BASIC BLOCK if.end11
%219:	load	real_memcpy 
%220:	call	dest src n %219 
%221:	br	return 

BASIC BLOCK return
%222:	phi	%206 %213 %220 
%223:	ret	%222 

FUNCTION strcat

BASIC BLOCK entry
%224:	call	XXX XXX XXX XXX llvm.dbg.value 
%225:	call	XXX XXX XXX XXX llvm.dbg.value 
%226:	load	real_memcpy 
%227:	icmp	%226 XXX 
%228:	br	%227 if.then if.end 

BASIC BLOCK if.then
%229:	call	XXX getLibraryFunction 
%230:	bitcast	%229 
%231:	store	%230 real_memcpy 
%232:	br	if.end 

BASIC BLOCK if.end
%233:	load	strcat.real_strcat 
%234:	icmp	%233 XXX 
%235:	br	%234 if.then2 if.end4 

BASIC BLOCK if.then2
%236:	call	XXX getLibraryFunction 
%237:	bitcast	%236 
%238:	store	%237 strcat.real_strcat 
%239:	br	if.end4 

BASIC BLOCK if.end4
%240:	load	_libsafe_exclude 
%241:	icmp	%240 XXX 
%242:	br	%241 if.end8 if.then6 

BASIC BLOCK if.then6
%243:	load	strcat.real_strcat 
%244:	call	dest src %243 
%245:	br	return 

BASIC BLOCK if.end8
%246:	call	dest _libsafe_stackVariableP 
%247:	call	XXX XXX XXX XXX llvm.dbg.value 
%248:	icmp	%246 XXX 
%249:	br	%248 if.end12 if.then10 

BASIC BLOCK if.then10
%250:	load	strcat.real_strcat 
%251:	call	dest src %250 
%252:	br	return 

BASIC BLOCK if.end12
%253:	call	dest %246 strnlen 
%254:	call	XXX XXX XXX XXX llvm.dbg.value 
%255:	call	src %246 strnlen 
%256:	call	XXX XXX XXX XXX llvm.dbg.value 
%257:	add	%253 %255 
%258:	icmp	%257 %246 
%259:	br	%258 if.end17 if.then16 

BASIC BLOCK if.then16
%260:	call	XXX _libsafe_die 
%261:	br	if.end17 

BASIC BLOCK if.end17
%262:	load	real_memcpy 
%263:	getelementptr	dest %253 
%264:	add	%255 XXX 
%265:	call	%263 src %264 %262 
%266:	br	return 

BASIC BLOCK return
%267:	phi	%244 %251 dest 
%268:	ret	%267 

FUNCTION strncat

BASIC BLOCK entry
%269:	call	XXX XXX XXX XXX llvm.dbg.value 
%270:	call	XXX XXX XXX XXX llvm.dbg.value 
%271:	call	XXX XXX XXX XXX llvm.dbg.value 
%272:	load	strncat.real_strncat 
%273:	icmp	%272 XXX 
%274:	br	%273 if.then if.end 

BASIC BLOCK if.then
%275:	call	XXX getLibraryFunction 
%276:	bitcast	%275 
%277:	store	%276 strncat.real_strncat 
%278:	br	if.end 

BASIC BLOCK if.end
%279:	load	_libsafe_exclude 
%280:	icmp	%279 XXX 
%281:	br	%280 if.end4 if.then2 

BASIC BLOCK if.then2
%282:	load	strncat.real_strncat 
%283:	call	dest src n %282 
%284:	br	return 

BASIC BLOCK if.end4
%285:	call	dest _libsafe_stackVariableP 
%286:	call	XXX XXX XXX XXX llvm.dbg.value 
%287:	icmp	%285 XXX 
%288:	br	%287 if.end8 if.then6 

BASIC BLOCK if.then6
%289:	load	strncat.real_strncat 
%290:	call	dest src n %289 
%291:	br	return 

BASIC BLOCK if.end8
%292:	call	dest %285 strnlen 
%293:	call	XXX XXX XXX XXX llvm.dbg.value 
%294:	call	src %285 strnlen 
%295:	call	XXX XXX XXX XXX llvm.dbg.value 
%296:	add	%292 n 
%297:	icmp	%296 %285 
%298:	br	%297 if.end15 land.lhs.true 

BASIC BLOCK land.lhs.true
%299:	add	%292 %294 
%300:	icmp	%299 %285 
%301:	br	%300 if.end15 if.then14 

BASIC BLOCK if.then14
%302:	call	XXX _libsafe_die 
%303:	br	if.end15 

BASIC BLOCK if.end15
%304:	load	strncat.real_strncat 
%305:	call	dest src n %304 
%306:	br	return 

BASIC BLOCK return
%307:	phi	%283 %290 %305 
%308:	ret	%307 

FUNCTION wcscat

BASIC BLOCK entry
%309:	call	XXX XXX XXX XXX llvm.dbg.value 
%310:	call	XXX XXX XXX XXX llvm.dbg.value 
%311:	load	real_memcpy 
%312:	icmp	%311 XXX 
%313:	br	%312 if.then if.end 

BASIC BLOCK if.then
%314:	call	XXX getLibraryFunction 
%315:	bitcast	%314 
%316:	store	%315 real_memcpy 
%317:	br	if.end 

BASIC BLOCK if.end
%318:	load	wcscat.real_wcscat 
%319:	icmp	%318 XXX 
%320:	br	%319 if.then2 if.end4 

BASIC BLOCK if.then2
%321:	call	XXX getLibraryFunction 
%322:	bitcast	%321 
%323:	store	%322 wcscat.real_wcscat 
%324:	br	if.end4 

BASIC BLOCK if.end4
%325:	load	_libsafe_exclude 
%326:	icmp	%325 XXX 
%327:	br	%326 if.end8 if.then6 

BASIC BLOCK if.then6
%328:	load	wcscat.real_wcscat 
%329:	call	dest src %328 
%330:	br	return 

BASIC BLOCK if.end8
%331:	bitcast	dest 
%332:	call	%331 _libsafe_stackVariableP 
%333:	call	XXX XXX XXX XXX llvm.dbg.value 
%334:	icmp	%332 XXX 
%335:	br	%334 if.end12 if.then10 

BASIC BLOCK if.then10
%336:	load	wcscat.real_wcscat 
%337:	call	dest src %336 
%338:	br	return 

BASIC BLOCK if.end12
%339:	udiv	%332 XXX 
%340:	call	dest %339 wcsnlen 
%341:	call	XXX XXX XXX XXX llvm.dbg.value 
%342:	udiv	%332 XXX 
%343:	call	src %342 wcsnlen 
%344:	call	XXX XXX XXX XXX llvm.dbg.value 
%345:	add	%340 %343 
%346:	add	%345 XXX 
%347:	udiv	%332 XXX 
%348:	icmp	%346 %347 
%349:	br	%348 if.end20 if.then19 

BASIC BLOCK if.then19
%350:	call	XXX _libsafe_die 
%351:	br	if.end20 

BASIC BLOCK if.end20
%352:	load	real_memcpy 
%353:	getelementptr	dest %340 
%354:	bitcast	%353 
%355:	bitcast	src 
%356:	add	%343 XXX 
%357:	call	%354 %355 %356 %352 
%358:	br	return 

BASIC BLOCK return
%359:	phi	%329 %337 dest 
%360:	ret	%359 

FUNCTION vfprintf

BASIC BLOCK entry
%361:	call	XXX XXX XXX XXX llvm.dbg.value 
%362:	call	XXX XXX XXX XXX llvm.dbg.value 
%363:	call	XXX XXX XXX XXX llvm.dbg.value 
%364:	call	XXX XXX XXX XXX llvm.dbg.value 
%365:	load	vfprintf.real_vfprintf 
%366:	icmp	%365 XXX 
%367:	br	%366 if.then if.end 

BASIC BLOCK if.then
%368:	call	XXX getLibraryFunction 
%369:	bitcast	%368 
%370:	store	%369 vfprintf.real_vfprintf 
%371:	br	if.end 

BASIC BLOCK if.end
%372:	load	_libsafe_exclude 
%373:	icmp	%372 XXX 
%374:	br	%373 if.end4 if.then2 

BASIC BLOCK if.then2
%375:	load	vfprintf.real_vfprintf 
%376:	call	fp format ap %375 
%377:	call	XXX XXX XXX XXX llvm.dbg.value 
%378:	br	return 

BASIC BLOCK if.end4
%379:	call	XXX XXX XXX XXX llvm.dbg.value 
%380:	br	for.cond 

BASIC BLOCK for.cond
%381:	phi	format %737 
%382:	phi	XXX %736 
%383:	load	%381 
%384:	icmp	%383 XXX 
%385:	br	%384 for.end241 for.body 

BASIC BLOCK for.body
%386:	load	%381 
%387:	sext	%386 
%388:	icmp	%387 XXX 
%389:	br	%388 if.end238 if.then7 

BASIC BLOCK if.then7
%390:	call	XXX XXX XXX XXX llvm.dbg.value 
%391:	getelementptr	%381 XXX 
%392:	call	XXX XXX XXX XXX llvm.dbg.value 
%393:	call	XXX XXX XXX XXX llvm.dbg.value 
%394:	br	for.cond8 

BASIC BLOCK for.cond8
%395:	phi	XXX %418 
%396:	phi	%391 %421 
%397:	phi	XXX XXX 
%398:	load	%396 
%399:	sext	%398 
%400:	icmp	%399 XXX 
%401:	br	%400 land.end land.rhs 

BASIC BLOCK land.rhs
%402:	load	%396 
%403:	sext	%402 
%404:	call	__ctype_b_loc 
%405:	load	%404 
%406:	getelementptr	%405 %403 
%407:	load	%406 
%408:	zext	%407 
%409:	and	%408 XXX 
%410:	icmp	%409 XXX 
%411:	br	land.end 

BASIC BLOCK land.end
%412:	phi	XXX %410 
%413:	br	%412 for.end for.body15 

BASIC BLOCK for.body15
%414:	icmp	%397 XXX 
%415:	br	%414 if.end19 if.then18 

BASIC BLOCK if.then18
%416:	call	XXX XXX XXX XXX llvm.dbg.value 
%417:	br	if.end19 

BASIC BLOCK if.end19
%418:	phi	%396 %395 
%419:	call	XXX XXX XXX XXX llvm.dbg.value 
%420:	br	for.inc 

BASIC BLOCK for.inc
%421:	getelementptr	%396 XXX 
%422:	call	XXX XXX XXX XXX llvm.dbg.value 
%423:	br	for.cond8 

BASIC BLOCK for.end
%424:	load	%396 
%425:	sext	%424 
%426:	icmp	%425 XXX 
%427:	br	%426 if.end25 if.then24 

BASIC BLOCK if.then24
%428:	br	for.end241 

BASIC BLOCK if.end25
%429:	icmp	%397 XXX 
%430:	br	%429 if.end35 if.then27 

BASIC BLOCK if.then27
%431:	load	%396 
%432:	sext	%431 
%433:	icmp	%432 XXX 
%434:	br	%433 if.else if.then31 

BASIC BLOCK if.then31
%435:	getelementptr	%396 XXX 
%436:	call	XXX XXX XXX XXX llvm.dbg.value 
%437:	br	if.end34 

BASIC BLOCK if.else
%438:	add	%382 XXX 
%439:	call	XXX XXX XXX XXX llvm.dbg.value 
%440:	getelementptr	%396 XXX 
%441:	call	XXX XXX XXX XXX llvm.dbg.value 
%442:	br	for.inc239 

BASIC BLOCK if.end34
%443:	br	if.end35 

BASIC BLOCK if.end35
%444:	phi	%435 %396 
%445:	br	for.cond36 

BASIC BLOCK for.cond36
%446:	phi	%444 %461 
%447:	load	%446 
%448:	sext	%447 
%449:	icmp	%448 XXX 
%450:	br	%449 land.end44 land.rhs39 

BASIC BLOCK land.rhs39
%451:	load	%446 
%452:	sext	%451 
%453:	getelementptr	is_printf_flag XXX %452 
%454:	load	%453 
%455:	sext	%454 
%456:	icmp	%455 XXX 
%457:	br	land.end44 

BASIC BLOCK land.end44
%458:	phi	XXX %456 
%459:	br	%458 for.end48 for.body45 

BASIC BLOCK for.body45
%460:	br	for.inc46 

BASIC BLOCK for.inc46
%461:	getelementptr	%446 XXX 
%462:	call	XXX XXX XXX XXX llvm.dbg.value 
%463:	br	for.cond36 

BASIC BLOCK for.end48
%464:	load	%446 
%465:	sext	%464 
%466:	icmp	%465 XXX 
%467:	br	%466 if.end53 if.then52 

BASIC BLOCK if.then52
%468:	br	for.end241 

BASIC BLOCK if.end53
%469:	load	%446 
%470:	sext	%469 
%471:	icmp	%470 XXX 
%472:	br	%471 if.else93 if.then57 

BASIC BLOCK if.then57
%473:	getelementptr	%446 XXX 
%474:	call	XXX XXX XXX XXX llvm.dbg.value 
%475:	call	XXX XXX XXX XXX llvm.dbg.value 
%476:	br	for.cond59 

BASIC BLOCK for.cond59
%477:	phi	%473 %497 
%478:	phi	XXX XXX 
%479:	load	%477 
%480:	sext	%479 
%481:	icmp	%480 XXX 
%482:	br	%481 land.end69 land.rhs62 

BASIC BLOCK land.rhs62
%483:	load	%477 
%484:	sext	%483 
%485:	call	__ctype_b_loc 
%486:	load	%485 
%487:	getelementptr	%486 %484 
%488:	load	%487 
%489:	zext	%488 
%490:	and	%489 XXX 
%491:	icmp	%490 XXX 
%492:	br	land.end69 

BASIC BLOCK land.end69
%493:	phi	XXX %491 
%494:	br	%493 for.end73 for.body70 

BASIC BLOCK for.body70
%495:	call	XXX XXX XXX XXX llvm.dbg.value 
%496:	br	for.inc71 

BASIC BLOCK for.inc71
%497:	getelementptr	%477 XXX 
%498:	call	XXX XXX XXX XXX llvm.dbg.value 
%499:	br	for.cond59 

BASIC BLOCK for.end73
%500:	load	%477 
%501:	sext	%500 
%502:	icmp	%501 XXX 
%503:	br	%502 if.end78 if.then77 

BASIC BLOCK if.then77
%504:	br	for.end241 

BASIC BLOCK if.end78
%505:	icmp	%478 XXX 
%506:	br	%505 if.else90 if.then80 

BASIC BLOCK if.then80
%507:	load	%477 
%508:	sext	%507 
%509:	icmp	%508 XXX 
%510:	br	%509 if.else86 if.then84 

BASIC BLOCK if.then84
%511:	getelementptr	%477 XXX 
%512:	call	XXX XXX XXX XXX llvm.dbg.value 
%513:	br	if.end89 

BASIC BLOCK if.else86
%514:	add	%382 XXX 
%515:	call	XXX XXX XXX XXX llvm.dbg.value 
%516:	getelementptr	%477 XXX 
%517:	call	XXX XXX XXX XXX llvm.dbg.value 
%518:	br	for.inc239 

BASIC BLOCK if.end89
%519:	br	if.end92 

BASIC BLOCK if.else90
%520:	add	%382 XXX 
%521:	call	XXX XXX XXX XXX llvm.dbg.value 
%522:	br	if.end92 

BASIC BLOCK if.end92
%523:	phi	%511 %477 
%524:	phi	%382 %520 
%525:	br	if.end114 

BASIC BLOCK if.else93
%526:	br	for.cond94 

BASIC BLOCK for.cond94
%527:	phi	%446 %545 
%528:	load	%527 
%529:	sext	%528 
%530:	icmp	%529 XXX 
%531:	br	%530 land.end104 land.rhs97 

BASIC BLOCK land.rhs97
%532:	load	%527 
%533:	sext	%532 
%534:	call	__ctype_b_loc 
%535:	load	%534 
%536:	getelementptr	%535 %533 
%537:	load	%536 
%538:	zext	%537 
%539:	and	%538 XXX 
%540:	icmp	%539 XXX 
%541:	br	land.end104 

BASIC BLOCK land.end104
%542:	phi	XXX %540 
%543:	br	%542 for.end108 for.body105 

BASIC BLOCK for.body105
%544:	br	for.inc106 

BASIC BLOCK for.inc106
%545:	getelementptr	%527 XXX 
%546:	call	XXX XXX XXX XXX llvm.dbg.value 
%547:	br	for.cond94 

BASIC BLOCK for.end108
%548:	load	%527 
%549:	sext	%548 
%550:	icmp	%549 XXX 
%551:	br	%550 if.end113 if.then112 

BASIC BLOCK if.then112
%552:	br	for.end241 

BASIC BLOCK if.end113
%553:	br	if.end114 

BASIC BLOCK if.end114
%554:	phi	%523 %527 
%555:	phi	%524 %382 
%556:	load	%554 
%557:	sext	%556 
%558:	icmp	%557 XXX 
%559:	br	%558 if.end181 if.then118 

BASIC BLOCK if.then118
%560:	getelementptr	%554 XXX 
%561:	call	XXX XXX XXX XXX llvm.dbg.value 
%562:	load	%560 
%563:	sext	%562 
%564:	icmp	%563 XXX 
%565:	br	%564 if.else159 if.then123 

BASIC BLOCK if.then123
%566:	getelementptr	%560 XXX 
%567:	call	XXX XXX XXX XXX llvm.dbg.value 
%568:	call	XXX XXX XXX XXX llvm.dbg.value 
%569:	br	for.cond125 

BASIC BLOCK for.cond125
%570:	phi	%566 %590 
%571:	phi	XXX XXX 
%572:	load	%570 
%573:	sext	%572 
%574:	icmp	%573 XXX 
%575:	br	%574 land.end135 land.rhs128 

BASIC BLOCK land.rhs128
%576:	load	%570 
%577:	sext	%576 
%578:	call	__ctype_b_loc 
%579:	load	%578 
%580:	getelementptr	%579 %577 
%581:	load	%580 
%582:	zext	%581 
%583:	and	%582 XXX 
%584:	icmp	%583 XXX 
%585:	br	land.end135 

BASIC BLOCK land.end135
%586:	phi	XXX %584 
%587:	br	%586 for.end139 for.body136 

BASIC BLOCK for.body136
%588:	call	XXX XXX XXX XXX llvm.dbg.value 
%589:	br	for.inc137 

BASIC BLOCK for.inc137
%590:	getelementptr	%570 XXX 
%591:	call	XXX XXX XXX XXX llvm.dbg.value 
%592:	br	for.cond125 

BASIC BLOCK for.end139
%593:	load	%570 
%594:	sext	%593 
%595:	icmp	%594 XXX 
%596:	br	%595 if.end144 if.then143 

BASIC BLOCK if.then143
%597:	br	for.end241 

BASIC BLOCK if.end144
%598:	icmp	%571 XXX 
%599:	br	%598 if.else156 if.then146 

BASIC BLOCK if.then146
%600:	load	%570 
%601:	sext	%600 
%602:	icmp	%601 XXX 
%603:	br	%602 if.else152 if.then150 

BASIC BLOCK if.then150
%604:	getelementptr	%570 XXX 
%605:	call	XXX XXX XXX XXX llvm.dbg.value 
%606:	br	if.end155 

BASIC BLOCK if.else152
%607:	add	%555 XXX 
%608:	call	XXX XXX XXX XXX llvm.dbg.value 
%609:	getelementptr	%570 XXX 
%610:	call	XXX XXX XXX XXX llvm.dbg.value 
%611:	br	for.inc239 

BASIC BLOCK if.end155
%612:	br	if.end158 

BASIC BLOCK if.else156
%613:	add	%555 XXX 
%614:	call	XXX XXX XXX XXX llvm.dbg.value 
%615:	br	if.end158 

BASIC BLOCK if.end158
%616:	phi	%604 %570 
%617:	phi	%555 %613 
%618:	br	if.end180 

BASIC BLOCK if.else159
%619:	br	for.cond160 

BASIC BLOCK for.cond160
%620:	phi	%560 %638 
%621:	load	%620 
%622:	sext	%621 
%623:	icmp	%622 XXX 
%624:	br	%623 land.end170 land.rhs163 

BASIC BLOCK land.rhs163
%625:	load	%620 
%626:	sext	%625 
%627:	call	__ctype_b_loc 
%628:	load	%627 
%629:	getelementptr	%628 %626 
%630:	load	%629 
%631:	zext	%630 
%632:	and	%631 XXX 
%633:	icmp	%632 XXX 
%634:	br	land.end170 

BASIC BLOCK land.end170
%635:	phi	XXX %633 
%636:	br	%635 for.end174 for.body171 

BASIC BLOCK for.body171
%637:	br	for.inc172 

BASIC BLOCK for.inc172
%638:	getelementptr	%620 XXX 
%639:	call	XXX XXX XXX XXX llvm.dbg.value 
%640:	br	for.cond160 

BASIC BLOCK for.end174
%641:	load	%620 
%642:	sext	%641 
%643:	icmp	%642 XXX 
%644:	br	%643 if.end179 if.then178 

BASIC BLOCK if.then178
%645:	br	for.end241 

BASIC BLOCK if.end179
%646:	br	if.end180 

BASIC BLOCK if.end180
%647:	phi	%616 %620 
%648:	phi	%617 %555 
%649:	br	if.end181 

BASIC BLOCK if.end181
%650:	phi	%647 %554 
%651:	phi	%648 %555 
%652:	load	%650 
%653:	sext	%652 
%654:	getelementptr	is_printf_lengthmod XXX %653 
%655:	load	%654 
%656:	icmp	%655 XXX 
%657:	br	%656 if.end214 if.then185 

BASIC BLOCK if.then185
%658:	getelementptr	%650 XXX 
%659:	call	XXX XXX XXX XXX llvm.dbg.value 
%660:	load	%658 
%661:	sext	%660 
%662:	icmp	%661 XXX 
%663:	br	%662 if.end191 if.then190 

BASIC BLOCK if.then190
%664:	br	for.end241 

BASIC BLOCK if.end191
%665:	load	%658 
%666:	sext	%665 
%667:	icmp	%666 XXX 
%668:	br	%667 lor.lhs.false land.lhs.true 

BASIC BLOCK land.lhs.true
%669:	getelementptr	%658 XXX 
%670:	load	%669 
%671:	sext	%670 
%672:	icmp	%671 XXX 
%673:	br	%672 lor.lhs.false if.then206 

BASIC BLOCK lor.lhs.false
%674:	load	%658 
%675:	sext	%674 
%676:	icmp	%675 XXX 
%677:	br	%676 if.end208 land.lhs.true201 

BASIC BLOCK land.lhs.true201
%678:	getelementptr	%658 XXX 
%679:	load	%678 
%680:	sext	%679 
%681:	icmp	%680 XXX 
%682:	br	%681 if.end208 if.then206 

BASIC BLOCK if.then206
%683:	getelementptr	%658 XXX 
%684:	call	XXX XXX XXX XXX llvm.dbg.value 
%685:	br	if.end208 

BASIC BLOCK if.end208
%686:	phi	%683 %658 %658 
%687:	load	%686 
%688:	sext	%687 
%689:	icmp	%688 XXX 
%690:	br	%689 if.end213 if.then212 

BASIC BLOCK if.then212
%691:	br	for.end241 

BASIC BLOCK if.end213
%692:	br	if.end214 

BASIC BLOCK if.end214
%693:	phi	%686 %650 
%694:	load	%693 
%695:	sext	%694 
%696:	getelementptr	is_printf_convspec XXX %695 
%697:	load	%696 
%698:	icmp	%697 XXX 
%699:	br	%698 if.end237 if.then218 

BASIC BLOCK if.then218
%700:	add	%651 XXX 
%701:	call	XXX XXX XXX XXX llvm.dbg.value 
%702:	icmp	%395 XXX 
%703:	br	%702 if.else224 if.then221 

BASIC BLOCK if.then221
%704:	call	%395 atoi 
%705:	sub	%704 XXX 
%706:	mul	%705 XXX 
%707:	getelementptr	ap %706 
%708:	bitcast	%707 
%709:	load	%708 
%710:	call	XXX XXX XXX XXX llvm.dbg.value 
%711:	br	if.end227 

BASIC BLOCK if.else224
%712:	mul	%700 XXX 
%713:	getelementptr	ap %712 
%714:	bitcast	%713 
%715:	load	%714 
%716:	call	XXX XXX XXX XXX llvm.dbg.value 
%717:	br	if.end227 

BASIC BLOCK if.end227
%718:	phi	%709 %715 
%719:	load	%693 
%720:	sext	%719 
%721:	icmp	%720 XXX 
%722:	br	%721 if.end236 if.then231 

BASIC BLOCK if.then231
%723:	call	%718 _libsafe_raVariableP 
%724:	icmp	%723 XXX 
%725:	br	%724 if.end235 if.then234 

BASIC BLOCK if.then234
%726:	call	XXX _libsafe_die 
%727:	br	if.end235 

BASIC BLOCK if.end235
%728:	br	if.end236 

BASIC BLOCK if.end236
%729:	br	if.end237 

BASIC BLOCK if.end237
%730:	phi	%700 %651 
%731:	br	if.end238 

BASIC BLOCK if.end238
%732:	phi	%693 %381 
%733:	phi	%730 %382 
%734:	br	for.inc239 

BASIC BLOCK for.inc239
%735:	phi	%732 %609 %516 %440 
%736:	phi	%733 %607 %514 %438 
%737:	getelementptr	%735 XXX 
%738:	call	XXX XXX XXX XXX llvm.dbg.value 
%739:	br	for.cond 

BASIC BLOCK for.end241
%740:	load	vfprintf.real_vfprintf 
%741:	call	fp format ap %740 
%742:	call	XXX XXX XXX XXX llvm.dbg.value 
%743:	br	return 

BASIC BLOCK return
%744:	phi	%376 %741 
%745:	ret	%744 

FUNCTION __ctype_b_loc

FUNCTION atoi

FUNCTION _IO_vfprintf

BASIC BLOCK entry
%746:	call	XXX XXX XXX XXX llvm.dbg.value 
%747:	call	XXX XXX XXX XXX llvm.dbg.value 
%748:	call	XXX XXX XXX XXX llvm.dbg.value 
%749:	call	XXX XXX XXX XXX llvm.dbg.value 
%750:	load	_IO_vfprintf.real_vfprintf 
%751:	icmp	%750 XXX 
%752:	br	%751 if.then if.end 

BASIC BLOCK if.then
%753:	call	XXX getLibraryFunction 
%754:	bitcast	%753 
%755:	store	%754 _IO_vfprintf.real_vfprintf 
%756:	br	if.end 

BASIC BLOCK if.end
%757:	load	_libsafe_exclude 
%758:	icmp	%757 XXX 
%759:	br	%758 if.end4 if.then2 

BASIC BLOCK if.then2
%760:	load	_IO_vfprintf.real_vfprintf 
%761:	call	fp format ap %760 
%762:	call	XXX XXX XXX XXX llvm.dbg.value 
%763:	br	return 

BASIC BLOCK if.end4
%764:	call	XXX XXX XXX XXX llvm.dbg.value 
%765:	br	for.cond 

BASIC BLOCK for.cond
%766:	phi	format %1122 
%767:	phi	XXX %1121 
%768:	load	%766 
%769:	icmp	%768 XXX 
%770:	br	%769 for.end241 for.body 

BASIC BLOCK for.body
%771:	load	%766 
%772:	sext	%771 
%773:	icmp	%772 XXX 
%774:	br	%773 if.end238 if.then7 

BASIC BLOCK if.then7
%775:	call	XXX XXX XXX XXX llvm.dbg.value 
%776:	getelementptr	%766 XXX 
%777:	call	XXX XXX XXX XXX llvm.dbg.value 
%778:	call	XXX XXX XXX XXX llvm.dbg.value 
%779:	br	for.cond8 

BASIC BLOCK for.cond8
%780:	phi	XXX %803 
%781:	phi	%776 %806 
%782:	phi	XXX XXX 
%783:	load	%781 
%784:	sext	%783 
%785:	icmp	%784 XXX 
%786:	br	%785 land.end land.rhs 

BASIC BLOCK land.rhs
%787:	load	%781 
%788:	sext	%787 
%789:	call	__ctype_b_loc 
%790:	load	%789 
%791:	getelementptr	%790 %788 
%792:	load	%791 
%793:	zext	%792 
%794:	and	%793 XXX 
%795:	icmp	%794 XXX 
%796:	br	land.end 

BASIC BLOCK land.end
%797:	phi	XXX %795 
%798:	br	%797 for.end for.body15 

BASIC BLOCK for.body15
%799:	icmp	%782 XXX 
%800:	br	%799 if.end19 if.then18 

BASIC BLOCK if.then18
%801:	call	XXX XXX XXX XXX llvm.dbg.value 
%802:	br	if.end19 

BASIC BLOCK if.end19
%803:	phi	%781 %780 
%804:	call	XXX XXX XXX XXX llvm.dbg.value 
%805:	br	for.inc 

BASIC BLOCK for.inc
%806:	getelementptr	%781 XXX 
%807:	call	XXX XXX XXX XXX llvm.dbg.value 
%808:	br	for.cond8 

BASIC BLOCK for.end
%809:	load	%781 
%810:	sext	%809 
%811:	icmp	%810 XXX 
%812:	br	%811 if.end25 if.then24 

BASIC BLOCK if.then24
%813:	br	for.end241 

BASIC BLOCK if.end25
%814:	icmp	%782 XXX 
%815:	br	%814 if.end35 if.then27 

BASIC BLOCK if.then27
%816:	load	%781 
%817:	sext	%816 
%818:	icmp	%817 XXX 
%819:	br	%818 if.else if.then31 

BASIC BLOCK if.then31
%820:	getelementptr	%781 XXX 
%821:	call	XXX XXX XXX XXX llvm.dbg.value 
%822:	br	if.end34 

BASIC BLOCK if.else
%823:	add	%767 XXX 
%824:	call	XXX XXX XXX XXX llvm.dbg.value 
%825:	getelementptr	%781 XXX 
%826:	call	XXX XXX XXX XXX llvm.dbg.value 
%827:	br	for.inc239 

BASIC BLOCK if.end34
%828:	br	if.end35 

BASIC BLOCK if.end35
%829:	phi	%820 %781 
%830:	br	for.cond36 

BASIC BLOCK for.cond36
%831:	phi	%829 %846 
%832:	load	%831 
%833:	sext	%832 
%834:	icmp	%833 XXX 
%835:	br	%834 land.end44 land.rhs39 

BASIC BLOCK land.rhs39
%836:	load	%831 
%837:	sext	%836 
%838:	getelementptr	is_printf_flag XXX %837 
%839:	load	%838 
%840:	sext	%839 
%841:	icmp	%840 XXX 
%842:	br	land.end44 

BASIC BLOCK land.end44
%843:	phi	XXX %841 
%844:	br	%843 for.end48 for.body45 

BASIC BLOCK for.body45
%845:	br	for.inc46 

BASIC BLOCK for.inc46
%846:	getelementptr	%831 XXX 
%847:	call	XXX XXX XXX XXX llvm.dbg.value 
%848:	br	for.cond36 

BASIC BLOCK for.end48
%849:	load	%831 
%850:	sext	%849 
%851:	icmp	%850 XXX 
%852:	br	%851 if.end53 if.then52 

BASIC BLOCK if.then52
%853:	br	for.end241 

BASIC BLOCK if.end53
%854:	load	%831 
%855:	sext	%854 
%856:	icmp	%855 XXX 
%857:	br	%856 if.else93 if.then57 

BASIC BLOCK if.then57
%858:	getelementptr	%831 XXX 
%859:	call	XXX XXX XXX XXX llvm.dbg.value 
%860:	call	XXX XXX XXX XXX llvm.dbg.value 
%861:	br	for.cond59 

BASIC BLOCK for.cond59
%862:	phi	%858 %882 
%863:	phi	XXX XXX 
%864:	load	%862 
%865:	sext	%864 
%866:	icmp	%865 XXX 
%867:	br	%866 land.end69 land.rhs62 

BASIC BLOCK land.rhs62
%868:	load	%862 
%869:	sext	%868 
%870:	call	__ctype_b_loc 
%871:	load	%870 
%872:	getelementptr	%871 %869 
%873:	load	%872 
%874:	zext	%873 
%875:	and	%874 XXX 
%876:	icmp	%875 XXX 
%877:	br	land.end69 

BASIC BLOCK land.end69
%878:	phi	XXX %876 
%879:	br	%878 for.end73 for.body70 

BASIC BLOCK for.body70
%880:	call	XXX XXX XXX XXX llvm.dbg.value 
%881:	br	for.inc71 

BASIC BLOCK for.inc71
%882:	getelementptr	%862 XXX 
%883:	call	XXX XXX XXX XXX llvm.dbg.value 
%884:	br	for.cond59 

BASIC BLOCK for.end73
%885:	load	%862 
%886:	sext	%885 
%887:	icmp	%886 XXX 
%888:	br	%887 if.end78 if.then77 

BASIC BLOCK if.then77
%889:	br	for.end241 

BASIC BLOCK if.end78
%890:	icmp	%863 XXX 
%891:	br	%890 if.else90 if.then80 

BASIC BLOCK if.then80
%892:	load	%862 
%893:	sext	%892 
%894:	icmp	%893 XXX 
%895:	br	%894 if.else86 if.then84 

BASIC BLOCK if.then84
%896:	getelementptr	%862 XXX 
%897:	call	XXX XXX XXX XXX llvm.dbg.value 
%898:	br	if.end89 

BASIC BLOCK if.else86
%899:	add	%767 XXX 
%900:	call	XXX XXX XXX XXX llvm.dbg.value 
%901:	getelementptr	%862 XXX 
%902:	call	XXX XXX XXX XXX llvm.dbg.value 
%903:	br	for.inc239 

BASIC BLOCK if.end89
%904:	br	if.end92 

BASIC BLOCK if.else90
%905:	add	%767 XXX 
%906:	call	XXX XXX XXX XXX llvm.dbg.value 
%907:	br	if.end92 

BASIC BLOCK if.end92
%908:	phi	%896 %862 
%909:	phi	%767 %905 
%910:	br	if.end114 

BASIC BLOCK if.else93
%911:	br	for.cond94 

BASIC BLOCK for.cond94
%912:	phi	%831 %930 
%913:	load	%912 
%914:	sext	%913 
%915:	icmp	%914 XXX 
%916:	br	%915 land.end104 land.rhs97 

BASIC BLOCK land.rhs97
%917:	load	%912 
%918:	sext	%917 
%919:	call	__ctype_b_loc 
%920:	load	%919 
%921:	getelementptr	%920 %918 
%922:	load	%921 
%923:	zext	%922 
%924:	and	%923 XXX 
%925:	icmp	%924 XXX 
%926:	br	land.end104 

BASIC BLOCK land.end104
%927:	phi	XXX %925 
%928:	br	%927 for.end108 for.body105 

BASIC BLOCK for.body105
%929:	br	for.inc106 

BASIC BLOCK for.inc106
%930:	getelementptr	%912 XXX 
%931:	call	XXX XXX XXX XXX llvm.dbg.value 
%932:	br	for.cond94 

BASIC BLOCK for.end108
%933:	load	%912 
%934:	sext	%933 
%935:	icmp	%934 XXX 
%936:	br	%935 if.end113 if.then112 

BASIC BLOCK if.then112
%937:	br	for.end241 

BASIC BLOCK if.end113
%938:	br	if.end114 

BASIC BLOCK if.end114
%939:	phi	%908 %912 
%940:	phi	%909 %767 
%941:	load	%939 
%942:	sext	%941 
%943:	icmp	%942 XXX 
%944:	br	%943 if.end181 if.then118 

BASIC BLOCK if.then118
%945:	getelementptr	%939 XXX 
%946:	call	XXX XXX XXX XXX llvm.dbg.value 
%947:	load	%945 
%948:	sext	%947 
%949:	icmp	%948 XXX 
%950:	br	%949 if.else159 if.then123 

BASIC BLOCK if.then123
%951:	getelementptr	%945 XXX 
%952:	call	XXX XXX XXX XXX llvm.dbg.value 
%953:	call	XXX XXX XXX XXX llvm.dbg.value 
%954:	br	for.cond125 

BASIC BLOCK for.cond125
%955:	phi	%951 %975 
%956:	phi	XXX XXX 
%957:	load	%955 
%958:	sext	%957 
%959:	icmp	%958 XXX 
%960:	br	%959 land.end135 land.rhs128 

BASIC BLOCK land.rhs128
%961:	load	%955 
%962:	sext	%961 
%963:	call	__ctype_b_loc 
%964:	load	%963 
%965:	getelementptr	%964 %962 
%966:	load	%965 
%967:	zext	%966 
%968:	and	%967 XXX 
%969:	icmp	%968 XXX 
%970:	br	land.end135 

BASIC BLOCK land.end135
%971:	phi	XXX %969 
%972:	br	%971 for.end139 for.body136 

BASIC BLOCK for.body136
%973:	call	XXX XXX XXX XXX llvm.dbg.value 
%974:	br	for.inc137 

BASIC BLOCK for.inc137
%975:	getelementptr	%955 XXX 
%976:	call	XXX XXX XXX XXX llvm.dbg.value 
%977:	br	for.cond125 

BASIC BLOCK for.end139
%978:	load	%955 
%979:	sext	%978 
%980:	icmp	%979 XXX 
%981:	br	%980 if.end144 if.then143 

BASIC BLOCK if.then143
%982:	br	for.end241 

BASIC BLOCK if.end144
%983:	icmp	%956 XXX 
%984:	br	%983 if.else156 if.then146 

BASIC BLOCK if.then146
%985:	load	%955 
%986:	sext	%985 
%987:	icmp	%986 XXX 
%988:	br	%987 if.else152 if.then150 

BASIC BLOCK if.then150
%989:	getelementptr	%955 XXX 
%990:	call	XXX XXX XXX XXX llvm.dbg.value 
%991:	br	if.end155 

BASIC BLOCK if.else152
%992:	add	%940 XXX 
%993:	call	XXX XXX XXX XXX llvm.dbg.value 
%994:	getelementptr	%955 XXX 
%995:	call	XXX XXX XXX XXX llvm.dbg.value 
%996:	br	for.inc239 

BASIC BLOCK if.end155
%997:	br	if.end158 

BASIC BLOCK if.else156
%998:	add	%940 XXX 
%999:	call	XXX XXX XXX XXX llvm.dbg.value 
%1000:	br	if.end158 

BASIC BLOCK if.end158
%1001:	phi	%989 %955 
%1002:	phi	%940 %998 
%1003:	br	if.end180 

BASIC BLOCK if.else159
%1004:	br	for.cond160 

BASIC BLOCK for.cond160
%1005:	phi	%945 %1023 
%1006:	load	%1005 
%1007:	sext	%1006 
%1008:	icmp	%1007 XXX 
%1009:	br	%1008 land.end170 land.rhs163 

BASIC BLOCK land.rhs163
%1010:	load	%1005 
%1011:	sext	%1010 
%1012:	call	__ctype_b_loc 
%1013:	load	%1012 
%1014:	getelementptr	%1013 %1011 
%1015:	load	%1014 
%1016:	zext	%1015 
%1017:	and	%1016 XXX 
%1018:	icmp	%1017 XXX 
%1019:	br	land.end170 

BASIC BLOCK land.end170
%1020:	phi	XXX %1018 
%1021:	br	%1020 for.end174 for.body171 

BASIC BLOCK for.body171
%1022:	br	for.inc172 

BASIC BLOCK for.inc172
%1023:	getelementptr	%1005 XXX 
%1024:	call	XXX XXX XXX XXX llvm.dbg.value 
%1025:	br	for.cond160 

BASIC BLOCK for.end174
%1026:	load	%1005 
%1027:	sext	%1026 
%1028:	icmp	%1027 XXX 
%1029:	br	%1028 if.end179 if.then178 

BASIC BLOCK if.then178
%1030:	br	for.end241 

BASIC BLOCK if.end179
%1031:	br	if.end180 

BASIC BLOCK if.end180
%1032:	phi	%1001 %1005 
%1033:	phi	%1002 %940 
%1034:	br	if.end181 

BASIC BLOCK if.end181
%1035:	phi	%1032 %939 
%1036:	phi	%1033 %940 
%1037:	load	%1035 
%1038:	sext	%1037 
%1039:	getelementptr	is_printf_lengthmod XXX %1038 
%1040:	load	%1039 
%1041:	icmp	%1040 XXX 
%1042:	br	%1041 if.end214 if.then185 

BASIC BLOCK if.then185
%1043:	getelementptr	%1035 XXX 
%1044:	call	XXX XXX XXX XXX llvm.dbg.value 
%1045:	load	%1043 
%1046:	sext	%1045 
%1047:	icmp	%1046 XXX 
%1048:	br	%1047 if.end191 if.then190 

BASIC BLOCK if.then190
%1049:	br	for.end241 

BASIC BLOCK if.end191
%1050:	load	%1043 
%1051:	sext	%1050 
%1052:	icmp	%1051 XXX 
%1053:	br	%1052 lor.lhs.false land.lhs.true 

BASIC BLOCK land.lhs.true
%1054:	getelementptr	%1043 XXX 
%1055:	load	%1054 
%1056:	sext	%1055 
%1057:	icmp	%1056 XXX 
%1058:	br	%1057 lor.lhs.false if.then206 

BASIC BLOCK lor.lhs.false
%1059:	load	%1043 
%1060:	sext	%1059 
%1061:	icmp	%1060 XXX 
%1062:	br	%1061 if.end208 land.lhs.true201 

BASIC BLOCK land.lhs.true201
%1063:	getelementptr	%1043 XXX 
%1064:	load	%1063 
%1065:	sext	%1064 
%1066:	icmp	%1065 XXX 
%1067:	br	%1066 if.end208 if.then206 

BASIC BLOCK if.then206
%1068:	getelementptr	%1043 XXX 
%1069:	call	XXX XXX XXX XXX llvm.dbg.value 
%1070:	br	if.end208 

BASIC BLOCK if.end208
%1071:	phi	%1068 %1043 %1043 
%1072:	load	%1071 
%1073:	sext	%1072 
%1074:	icmp	%1073 XXX 
%1075:	br	%1074 if.end213 if.then212 

BASIC BLOCK if.then212
%1076:	br	for.end241 

BASIC BLOCK if.end213
%1077:	br	if.end214 

BASIC BLOCK if.end214
%1078:	phi	%1071 %1035 
%1079:	load	%1078 
%1080:	sext	%1079 
%1081:	getelementptr	is_printf_convspec XXX %1080 
%1082:	load	%1081 
%1083:	icmp	%1082 XXX 
%1084:	br	%1083 if.end237 if.then218 

BASIC BLOCK if.then218
%1085:	add	%1036 XXX 
%1086:	call	XXX XXX XXX XXX llvm.dbg.value 
%1087:	icmp	%780 XXX 
%1088:	br	%1087 if.else224 if.then221 

BASIC BLOCK if.then221
%1089:	call	%780 atoi 
%1090:	sub	%1089 XXX 
%1091:	mul	%1090 XXX 
%1092:	getelementptr	ap %1091 
%1093:	bitcast	%1092 
%1094:	load	%1093 
%1095:	call	XXX XXX XXX XXX llvm.dbg.value 
%1096:	br	if.end227 

BASIC BLOCK if.else224
%1097:	mul	%1085 XXX 
%1098:	getelementptr	ap %1097 
%1099:	bitcast	%1098 
%1100:	load	%1099 
%1101:	call	XXX XXX XXX XXX llvm.dbg.value 
%1102:	br	if.end227 

BASIC BLOCK if.end227
%1103:	phi	%1094 %1100 
%1104:	load	%1078 
%1105:	sext	%1104 
%1106:	icmp	%1105 XXX 
%1107:	br	%1106 if.end236 if.then231 

BASIC BLOCK if.then231
%1108:	call	%1103 _libsafe_raVariableP 
%1109:	icmp	%1108 XXX 
%1110:	br	%1109 if.end235 if.then234 

BASIC BLOCK if.then234
%1111:	call	XXX _libsafe_die 
%1112:	br	if.end235 

BASIC BLOCK if.end235
%1113:	br	if.end236 

BASIC BLOCK if.end236
%1114:	br	if.end237 

BASIC BLOCK if.end237
%1115:	phi	%1085 %1036 
%1116:	br	if.end238 

BASIC BLOCK if.end238
%1117:	phi	%1078 %766 
%1118:	phi	%1115 %767 
%1119:	br	for.inc239 

BASIC BLOCK for.inc239
%1120:	phi	%1117 %994 %901 %825 
%1121:	phi	%1118 %992 %899 %823 
%1122:	getelementptr	%1120 XXX 
%1123:	call	XXX XXX XXX XXX llvm.dbg.value 
%1124:	br	for.cond 

BASIC BLOCK for.end241
%1125:	load	_IO_vfprintf.real_vfprintf 
%1126:	call	fp format ap %1125 
%1127:	call	XXX XXX XXX XXX llvm.dbg.value 
%1128:	br	return 

BASIC BLOCK return
%1129:	phi	%761 %1126 
%1130:	ret	%1129 

FUNCTION sprintf

BASIC BLOCK entry
%1131:	alloca	XXX 
%1132:	call	XXX XXX XXX XXX llvm.dbg.value 
%1133:	call	XXX XXX XXX XXX llvm.dbg.value 
%1134:	call	XXX XXX XXX llvm.dbg.declare 
%1135:	load	sprintf.real_vsprintf 
%1136:	icmp	%1135 XXX 
%1137:	br	%1136 if.then if.end 

BASIC BLOCK if.then
%1138:	call	XXX getLibraryFunction 
%1139:	bitcast	%1138 
%1140:	store	%1139 sprintf.real_vsprintf 
%1141:	br	if.end 

BASIC BLOCK if.end
%1142:	load	sprintf.real_vsnprintf 
%1143:	icmp	%1142 XXX 
%1144:	br	%1143 if.then2 if.end4 

BASIC BLOCK if.then2
%1145:	call	XXX getLibraryFunction 
%1146:	bitcast	%1145 
%1147:	store	%1146 sprintf.real_vsnprintf 
%1148:	br	if.end4 

BASIC BLOCK if.end4
%1149:	load	_libsafe_exclude 
%1150:	icmp	%1149 XXX 
%1151:	br	%1150 if.end10 if.then6 

BASIC BLOCK if.then6
%1152:	bitcast	%1131 
%1153:	call	%1152 llvm.va_start 
%1154:	load	sprintf.real_vsprintf 
%1155:	load	%1131 
%1156:	call	str format %1155 %1154 
%1157:	call	XXX XXX XXX XXX llvm.dbg.value 
%1158:	bitcast	%1131 
%1159:	call	%1158 llvm.va_end 
%1160:	br	return 

BASIC BLOCK if.end10
%1161:	call	str _libsafe_stackVariableP 
%1162:	call	XXX XXX XXX XXX llvm.dbg.value 
%1163:	icmp	%1161 XXX 
%1164:	br	%1163 if.end16 if.then12 

BASIC BLOCK if.then12
%1165:	bitcast	%1131 
%1166:	call	%1165 llvm.va_start 
%1167:	load	sprintf.real_vsprintf 
%1168:	load	%1131 
%1169:	call	str format %1168 %1167 
%1170:	call	XXX XXX XXX XXX llvm.dbg.value 
%1171:	bitcast	%1131 
%1172:	call	%1171 llvm.va_end 
%1173:	br	return 

BASIC BLOCK if.end16
%1174:	bitcast	%1131 
%1175:	call	%1174 llvm.va_start 
%1176:	load	sprintf.real_vsnprintf 
%1177:	load	%1131 
%1178:	call	str %1161 format %1177 %1176 
%1179:	call	XXX XXX XXX XXX llvm.dbg.value 
%1180:	icmp	%1178 XXX 
%1181:	br	%1180 lor.lhs.false if.then21 

BASIC BLOCK lor.lhs.false
%1182:	sub	%1161 XXX 
%1183:	icmp	%1178 %1182 
%1184:	br	%1183 if.end22 if.then21 

BASIC BLOCK if.then21
%1185:	call	XXX _libsafe_die 
%1186:	br	if.end22 

BASIC BLOCK if.end22
%1187:	bitcast	%1131 
%1188:	call	%1187 llvm.va_end 
%1189:	br	return 

BASIC BLOCK return
%1190:	phi	%1156 %1169 %1178 
%1191:	ret	%1190 

FUNCTION llvm.va_start

FUNCTION llvm.va_end

FUNCTION snprintf

BASIC BLOCK entry
%1192:	alloca	XXX 
%1193:	call	XXX XXX XXX XXX llvm.dbg.value 
%1194:	call	XXX XXX XXX XXX llvm.dbg.value 
%1195:	call	XXX XXX XXX XXX llvm.dbg.value 
%1196:	call	XXX XXX XXX llvm.dbg.declare 
%1197:	load	snprintf.real_vsnprintf 
%1198:	icmp	%1197 XXX 
%1199:	br	%1198 if.then if.end 

BASIC BLOCK if.then
%1200:	call	XXX getLibraryFunction 
%1201:	bitcast	%1200 
%1202:	store	%1201 snprintf.real_vsnprintf 
%1203:	br	if.end 

BASIC BLOCK if.end
%1204:	load	_libsafe_exclude 
%1205:	icmp	%1204 XXX 
%1206:	br	%1205 if.end6 if.then2 

BASIC BLOCK if.then2
%1207:	bitcast	%1192 
%1208:	call	%1207 llvm.va_start 
%1209:	load	snprintf.real_vsnprintf 
%1210:	load	%1192 
%1211:	call	str size format %1210 %1209 
%1212:	call	XXX XXX XXX XXX llvm.dbg.value 
%1213:	bitcast	%1192 
%1214:	call	%1213 llvm.va_end 
%1215:	br	return 

BASIC BLOCK if.end6
%1216:	call	str _libsafe_stackVariableP 
%1217:	call	XXX XXX XXX XXX llvm.dbg.value 
%1218:	icmp	%1216 XXX 
%1219:	br	%1218 if.end12 if.then8 

BASIC BLOCK if.then8
%1220:	bitcast	%1192 
%1221:	call	%1220 llvm.va_start 
%1222:	load	snprintf.real_vsnprintf 
%1223:	load	%1192 
%1224:	call	str size format %1223 %1222 
%1225:	call	XXX XXX XXX XXX llvm.dbg.value 
%1226:	bitcast	%1192 
%1227:	call	%1226 llvm.va_end 
%1228:	br	return 

BASIC BLOCK if.end12
%1229:	bitcast	%1192 
%1230:	call	%1229 llvm.va_start 
%1231:	load	snprintf.real_vsnprintf 
%1232:	load	%1192 
%1233:	call	str size format %1232 %1231 
%1234:	call	XXX XXX XXX XXX llvm.dbg.value 
%1235:	icmp	%1233 XXX 
%1236:	br	%1235 lor.lhs.false land.lhs.true 

BASIC BLOCK lor.lhs.false
%1237:	sub	%1216 XXX 
%1238:	icmp	%1233 %1237 
%1239:	br	%1238 if.end19 land.lhs.true 

BASIC BLOCK land.lhs.true
%1240:	icmp	size %1216 
%1241:	br	%1240 if.end19 if.then18 

BASIC BLOCK if.then18
%1242:	call	XXX _libsafe_die 
%1243:	br	if.end19 

BASIC BLOCK if.end19
%1244:	bitcast	%1192 
%1245:	call	%1244 llvm.va_end 
%1246:	br	return 

BASIC BLOCK return
%1247:	phi	%1211 %1224 %1233 
%1248:	ret	%1247 

FUNCTION vsprintf

BASIC BLOCK entry
%1249:	call	XXX XXX XXX XXX llvm.dbg.value 
%1250:	call	XXX XXX XXX XXX llvm.dbg.value 
%1251:	call	XXX XXX XXX XXX llvm.dbg.value 
%1252:	load	vsprintf.real_vsprintf 
%1253:	icmp	%1252 XXX 
%1254:	br	%1253 if.then if.end 

BASIC BLOCK if.then
%1255:	call	XXX getLibraryFunction 
%1256:	bitcast	%1255 
%1257:	store	%1256 vsprintf.real_vsprintf 
%1258:	br	if.end 

BASIC BLOCK if.end
%1259:	load	vsprintf.real_vsnprintf 
%1260:	icmp	%1259 XXX 
%1261:	br	%1260 if.then2 if.end4 

BASIC BLOCK if.then2
%1262:	call	XXX getLibraryFunction 
%1263:	bitcast	%1262 
%1264:	store	%1263 vsprintf.real_vsnprintf 
%1265:	br	if.end4 

BASIC BLOCK if.end4
%1266:	load	_libsafe_exclude 
%1267:	icmp	%1266 XXX 
%1268:	br	%1267 if.end8 if.then6 

BASIC BLOCK if.then6
%1269:	load	vsprintf.real_vsprintf 
%1270:	call	str format ap %1269 
%1271:	br	return 

BASIC BLOCK if.end8
%1272:	call	str _libsafe_stackVariableP 
%1273:	call	XXX XXX XXX XXX llvm.dbg.value 
%1274:	icmp	%1272 XXX 
%1275:	br	%1274 if.end12 if.then10 

BASIC BLOCK if.then10
%1276:	load	vsprintf.real_vsprintf 
%1277:	call	str format ap %1276 
%1278:	br	return 

BASIC BLOCK if.end12
%1279:	load	vsprintf.real_vsnprintf 
%1280:	call	str %1272 format ap %1279 
%1281:	call	XXX XXX XXX XXX llvm.dbg.value 
%1282:	icmp	%1280 XXX 
%1283:	br	%1282 lor.lhs.false if.then16 

BASIC BLOCK lor.lhs.false
%1284:	sub	%1272 XXX 
%1285:	icmp	%1280 %1284 
%1286:	br	%1285 if.end17 if.then16 

BASIC BLOCK if.then16
%1287:	call	XXX _libsafe_die 
%1288:	br	if.end17 

BASIC BLOCK if.end17
%1289:	br	return 

BASIC BLOCK return
%1290:	phi	%1270 %1277 %1280 
%1291:	ret	%1290 

FUNCTION vsnprintf

BASIC BLOCK entry
%1292:	call	XXX XXX XXX XXX llvm.dbg.value 
%1293:	call	XXX XXX XXX XXX llvm.dbg.value 
%1294:	call	XXX XXX XXX XXX llvm.dbg.value 
%1295:	call	XXX XXX XXX XXX llvm.dbg.value 
%1296:	load	vsnprintf.real_vsnprintf 
%1297:	icmp	%1296 XXX 
%1298:	br	%1297 if.then if.end 

BASIC BLOCK if.then
%1299:	call	XXX getLibraryFunction 
%1300:	bitcast	%1299 
%1301:	store	%1300 vsnprintf.real_vsnprintf 
%1302:	br	if.end 

BASIC BLOCK if.end
%1303:	load	_libsafe_exclude 
%1304:	icmp	%1303 XXX 
%1305:	br	%1304 if.end4 if.then2 

BASIC BLOCK if.then2
%1306:	load	vsnprintf.real_vsnprintf 
%1307:	call	str size format ap %1306 
%1308:	br	return 

BASIC BLOCK if.end4
%1309:	call	str _libsafe_stackVariableP 
%1310:	call	XXX XXX XXX XXX llvm.dbg.value 
%1311:	icmp	%1309 XXX 
%1312:	br	%1311 if.end8 if.then6 

BASIC BLOCK if.then6
%1313:	load	vsnprintf.real_vsnprintf 
%1314:	call	str size format ap %1313 
%1315:	br	return 

BASIC BLOCK if.end8
%1316:	load	vsnprintf.real_vsnprintf 
%1317:	call	str size format ap %1316 
%1318:	call	XXX XXX XXX XXX llvm.dbg.value 
%1319:	icmp	%1317 XXX 
%1320:	br	%1319 lor.lhs.false land.lhs.true 

BASIC BLOCK lor.lhs.false
%1321:	sub	%1309 XXX 
%1322:	icmp	%1317 %1321 
%1323:	br	%1322 if.end14 land.lhs.true 

BASIC BLOCK land.lhs.true
%1324:	icmp	size %1309 
%1325:	br	%1324 if.end14 if.then13 

BASIC BLOCK if.then13
%1326:	call	XXX _libsafe_die 
%1327:	br	if.end14 

BASIC BLOCK if.end14
%1328:	br	return 

BASIC BLOCK return
%1329:	phi	%1307 %1314 %1317 
%1330:	ret	%1329 

FUNCTION getwd

BASIC BLOCK entry
%1331:	call	XXX XXX XXX XXX llvm.dbg.value 
%1332:	load	getwd.real_getwd 
%1333:	icmp	%1332 XXX 
%1334:	br	%1333 if.then if.end 

BASIC BLOCK if.then
%1335:	call	XXX getLibraryFunction 
%1336:	bitcast	%1335 
%1337:	store	%1336 getwd.real_getwd 
%1338:	br	if.end 

BASIC BLOCK if.end
%1339:	load	_libsafe_exclude 
%1340:	icmp	%1339 XXX 
%1341:	br	%1340 if.end4 if.then2 

BASIC BLOCK if.then2
%1342:	load	getwd.real_getwd 
%1343:	call	buf %1342 
%1344:	br	return 

BASIC BLOCK if.end4
%1345:	call	buf _libsafe_stackVariableP 
%1346:	call	XXX XXX XXX XXX llvm.dbg.value 
%1347:	icmp	%1345 XXX 
%1348:	br	%1347 if.end8 if.then6 

BASIC BLOCK if.then6
%1349:	load	getwd.real_getwd 
%1350:	call	buf %1349 
%1351:	br	return 

BASIC BLOCK if.end8
%1352:	call	buf XXX getcwd 
%1353:	call	XXX XXX XXX XXX llvm.dbg.value 
%1354:	call	buf strlen 
%1355:	add	%1354 XXX 
%1356:	icmp	%1355 %1345 
%1357:	br	%1356 if.end13 if.then12 

BASIC BLOCK if.then12
%1358:	call	XXX _libsafe_die 
%1359:	br	if.end13 

BASIC BLOCK if.end13
%1360:	br	return 

BASIC BLOCK return
%1361:	phi	%1343 %1350 %1352 
%1362:	ret	%1361 

FUNCTION getcwd

FUNCTION strlen

FUNCTION gets

BASIC BLOCK entry
%1363:	call	XXX XXX XXX XXX llvm.dbg.value 
%1364:	load	gets.real_gets 
%1365:	icmp	%1364 XXX 
%1366:	br	%1365 if.then if.end 

BASIC BLOCK if.then
%1367:	call	XXX getLibraryFunction 
%1368:	bitcast	%1367 
%1369:	store	%1368 gets.real_gets 
%1370:	br	if.end 

BASIC BLOCK if.end
%1371:	load	_libsafe_exclude 
%1372:	icmp	%1371 XXX 
%1373:	br	%1372 if.end4 if.then2 

BASIC BLOCK if.then2
%1374:	load	gets.real_gets 
%1375:	call	s %1374 
%1376:	br	return 

BASIC BLOCK if.end4
%1377:	call	s _libsafe_stackVariableP 
%1378:	call	XXX XXX XXX XXX llvm.dbg.value 
%1379:	icmp	%1377 XXX 
%1380:	br	%1379 if.end8 if.then6 

BASIC BLOCK if.then6
%1381:	load	gets.real_gets 
%1382:	call	s %1381 
%1383:	br	return 

BASIC BLOCK if.end8
%1384:	load	stdin 
%1385:	call	s %1377 %1384 fgets 
%1386:	call	s strlen 
%1387:	call	XXX XXX XXX XXX llvm.dbg.value 
%1388:	sub	%1386 XXX 
%1389:	getelementptr	s %1388 
%1390:	load	%1389 
%1391:	sext	%1390 
%1392:	icmp	%1391 XXX 
%1393:	br	%1392 if.end16 if.then13 

BASIC BLOCK if.then13
%1394:	sub	%1386 XXX 
%1395:	getelementptr	s %1394 
%1396:	store	XXX %1395 
%1397:	br	if.end16 

BASIC BLOCK if.end16
%1398:	br	return 

BASIC BLOCK return
%1399:	phi	%1375 %1382 s 
%1400:	ret	%1399 

FUNCTION fgets

FUNCTION realpath

BASIC BLOCK entry
%1401:	alloca	XXX 
%1402:	call	XXX XXX XXX XXX llvm.dbg.value 
%1403:	call	XXX XXX XXX XXX llvm.dbg.value 
%1404:	call	XXX XXX XXX llvm.dbg.declare 
%1405:	load	real_memcpy 
%1406:	icmp	%1405 XXX 
%1407:	br	%1406 if.then if.end 

BASIC BLOCK if.then
%1408:	call	XXX getLibraryFunction 
%1409:	bitcast	%1408 
%1410:	store	%1409 real_memcpy 
%1411:	br	if.end 

BASIC BLOCK if.end
%1412:	load	realpath.real_realpath 
%1413:	icmp	%1412 XXX 
%1414:	br	%1413 if.then2 if.end4 

BASIC BLOCK if.then2
%1415:	call	XXX getLibraryFunction 
%1416:	bitcast	%1415 
%1417:	store	%1416 realpath.real_realpath 
%1418:	br	if.end4 

BASIC BLOCK if.end4
%1419:	load	_libsafe_exclude 
%1420:	icmp	%1419 XXX 
%1421:	br	%1420 if.end8 if.then6 

BASIC BLOCK if.then6
%1422:	load	realpath.real_realpath 
%1423:	call	path resolved_path %1422 
%1424:	br	return 

BASIC BLOCK if.end8
%1425:	call	resolved_path _libsafe_stackVariableP 
%1426:	call	XXX XXX XXX XXX llvm.dbg.value 
%1427:	icmp	%1425 XXX 
%1428:	br	%1427 if.end12 if.then10 

BASIC BLOCK if.then10
%1429:	load	realpath.real_realpath 
%1430:	call	path resolved_path %1429 
%1431:	br	return 

BASIC BLOCK if.end12
%1432:	load	realpath.real_realpath 
%1433:	getelementptr	%1401 XXX XXX 
%1434:	call	path %1433 %1432 
%1435:	call	XXX XXX XXX XXX llvm.dbg.value 
%1436:	getelementptr	%1401 XXX XXX 
%1437:	call	%1436 %1425 strnlen 
%1438:	call	XXX XXX XXX XXX llvm.dbg.value 
%1439:	icmp	%1437 %1425 
%1440:	br	%1439 if.end18 if.then17 

BASIC BLOCK if.then17
%1441:	call	XXX _libsafe_die 
%1442:	br	if.end18 

BASIC BLOCK if.end18
%1443:	load	real_memcpy 
%1444:	getelementptr	%1401 XXX XXX 
%1445:	add	%1437 XXX 
%1446:	call	resolved_path %1444 %1445 %1443 
%1447:	icmp	%1434 XXX 
%1448:	br	%1447 cond.false cond.true 

BASIC BLOCK cond.true
%1449:	br	cond.end 

BASIC BLOCK cond.false
%1450:	br	cond.end 

BASIC BLOCK cond.end
%1451:	phi	XXX resolved_path 
%1452:	br	return 

BASIC BLOCK return
%1453:	phi	%1423 %1430 %1451 
%1454:	ret	%1453 

FUNCTION _IO_vfscanf

BASIC BLOCK entry
%1455:	alloca	XXX 
%1456:	alloca	XXX 
%1457:	call	XXX XXX XXX XXX llvm.dbg.value 
%1458:	call	XXX XXX XXX XXX llvm.dbg.value 
%1459:	call	XXX XXX XXX XXX llvm.dbg.value 
%1460:	call	XXX XXX XXX XXX llvm.dbg.value 
%1461:	call	XXX XXX XXX llvm.dbg.declare 
%1462:	call	XXX XXX XXX llvm.dbg.declare 
%1463:	load	_IO_vfscanf.real_IO_vfscanf 
%1464:	icmp	%1463 XXX 
%1465:	br	%1464 if.then if.end 

BASIC BLOCK if.then
%1466:	call	XXX getLibraryFunction 
%1467:	bitcast	%1466 
%1468:	store	%1467 _IO_vfscanf.real_IO_vfscanf 
%1469:	br	if.end 

BASIC BLOCK if.end
%1470:	load	_libsafe_exclude 
%1471:	icmp	%1470 XXX 
%1472:	br	%1471 if.end4 if.then2 

BASIC BLOCK if.then2
%1473:	load	_IO_vfscanf.real_IO_vfscanf 
%1474:	call	s format argptr errp %1473 
%1475:	br	return 

BASIC BLOCK if.end4
%1476:	getelementptr	%1455 XXX XXX 
%1477:	getelementptr	%1456 XXX XXX 
%1478:	call	XXX %1476 %1477 _libsafe_save_ra_fp 
%1479:	call	XXX XXX XXX XXX llvm.dbg.value 
%1480:	load	_IO_vfscanf.real_IO_vfscanf 
%1481:	call	s format argptr errp %1480 
%1482:	call	XXX XXX XXX XXX llvm.dbg.value 
%1483:	icmp	%1478 XXX 
%1484:	br	%1483 if.end13 land.lhs.true 

BASIC BLOCK land.lhs.true
%1485:	getelementptr	%1455 XXX XXX 
%1486:	getelementptr	%1456 XXX XXX 
%1487:	call	%1478 %1485 %1486 _libsafe_verify_ra_fp 
%1488:	icmp	%1487 XXX 
%1489:	br	%1488 if.end13 if.then12 

BASIC BLOCK if.then12
%1490:	call	XXX _libsafe_die 
%1491:	br	if.end13 

BASIC BLOCK if.end13
%1492:	br	return 

BASIC BLOCK return
%1493:	phi	%1474 %1481 
%1494:	ret	%1493 

FUNCTION fopen

FUNCTION strncmp

FUNCTION geteuid

FUNCTION fclose

FUNCTION readlink

FUNCTION dlsym

FUNCTION fprintf

FUNCTION dlerror

FUNCTION _exit

FUNCTION llvm.dbg.value

FUNCTION getLibraryFunction

BASIC BLOCK entry
%1495:	call	XXX XXX XXX XXX llvm.dbg.value 
%1496:	call	XXX funcName dlsym 
%1497:	call	XXX XXX XXX XXX llvm.dbg.value 
%1498:	icmp	%1496 XXX 
%1499:	br	%1498 if.end if.then 

BASIC BLOCK if.then
%1500:	load	stderr 
%1501:	call	dlerror 
%1502:	call	%1500 XXX funcName %1501 fprintf 
%1503:	call	XXX _exit 
%1504:	unreachable	

BASIC BLOCK if.end
%1505:	ret	%1496 

FUNCTION _intercept_init

BASIC BLOCK entry
%1506:	alloca	XXX 
%1507:	alloca	XXX 
%1508:	call	XXX XXX XXX llvm.dbg.declare 
%1509:	call	XXX XXX XXX llvm.dbg.declare 
%1510:	getelementptr	%1506 XXX XXX 
%1511:	call	%1510 XXX get_exename 
%1512:	call	XXX XXX fopen 
%1513:	call	XXX XXX XXX XXX llvm.dbg.value 
%1514:	icmp	%1512 XXX 
%1515:	br	%1514 if.end21 if.then 

BASIC BLOCK if.then
%1516:	br	while.cond 

BASIC BLOCK while.cond
%1517:	getelementptr	%1507 XXX XXX 
%1518:	call	%1517 XXX %1512 fgets 
%1519:	icmp	%1518 XXX 
%1520:	br	%1519 while.end while.body 

BASIC BLOCK while.body
%1521:	getelementptr	%1507 XXX XXX 
%1522:	call	%1521 XXX strnlen 
%1523:	sub	%1522 XXX 
%1524:	getelementptr	%1507 XXX %1523 
%1525:	store	XXX %1524 
%1526:	getelementptr	%1507 XXX XXX 
%1527:	getelementptr	%1506 XXX XXX 
%1528:	call	%1526 %1527 XXX strncmp 
%1529:	icmp	%1528 XXX 
%1530:	br	%1529 if.then10 if.end 

BASIC BLOCK if.then10
%1531:	store	XXX _libsafe_exclude 
%1532:	br	if.end 

BASIC BLOCK if.end
%1533:	getelementptr	%1507 XXX XXX 
%1534:	call	%1533 XXX XXX strncmp 
%1535:	icmp	%1534 XXX 
%1536:	br	%1535 if.then14 if.end19 

BASIC BLOCK if.then14
%1537:	call	geteuid 
%1538:	icmp	%1537 XXX 
%1539:	br	%1538 if.end18 if.then17 

BASIC BLOCK if.then17
%1540:	store	XXX _libsafe_exclude 
%1541:	br	if.end18 

BASIC BLOCK if.end18
%1542:	br	if.end19 

BASIC BLOCK if.end19
%1543:	br	while.cond 

BASIC BLOCK while.end
%1544:	call	%1512 fclose 
%1545:	br	if.end21 

BASIC BLOCK if.end21
%1546:	ret	

FUNCTION _intercept_fini

BASIC BLOCK entry
%1547:	ret	

FUNCTION get_exename

BASIC BLOCK entry
%1548:	call	XXX XXX XXX XXX llvm.dbg.value 
%1549:	call	XXX XXX XXX XXX llvm.dbg.value 
%1550:	sub	size XXX 
%1551:	call	XXX exename %1550 readlink 
%1552:	call	XXX XXX XXX XXX llvm.dbg.value 
%1553:	icmp	%1551 XXX 
%1554:	br	%1553 if.else if.then 

BASIC BLOCK if.then
%1555:	getelementptr	exename XXX 
%1556:	store	XXX %1555 
%1557:	br	if.end 

BASIC BLOCK if.else
%1558:	getelementptr	exename %1551 
%1559:	store	XXX %1558 
%1560:	br	if.end 

BASIC BLOCK if.end
%1561:	ret	exename 

FUNCTION _libsafe_stackVariableP

BASIC BLOCK entry
%1562:	alloca	XXX 
%1563:	call	XXX XXX XXX XXX llvm.dbg.value 
%1564:	call	XXX XXX XXX XXX llvm.dbg.value 
%1565:	call	XXX XXX XXX llvm.dbg.declare 
%1566:	load	dying 
%1567:	icmp	%1566 XXX 
%1568:	br	%1567 if.end if.then 

BASIC BLOCK if.then
%1569:	br	return 

BASIC BLOCK if.end
%1570:	bitcast	%1562 
%1571:	call	XXX XXX XXX XXX llvm.dbg.value 
%1572:	icmp	%1570 addr 
%1573:	br	%1572 if.end2 if.then1 

BASIC BLOCK if.then1
%1574:	br	return 

BASIC BLOCK if.end2
%1575:	call	XXX llvm.frameaddress 
%1576:	store	%1575 %1562 
%1577:	bitcast	%1562 
%1578:	icmp	%1577 XXX 
%1579:	br	%1578 cond.false cond.true 

BASIC BLOCK cond.true
%1580:	br	cond.end7 

BASIC BLOCK cond.false
%1581:	bitcast	%1562 
%1582:	icmp	%1581 XXX 
%1583:	br	%1582 cond.false6 cond.true5 

BASIC BLOCK cond.true5
%1584:	br	cond.end 

BASIC BLOCK cond.false6
%1585:	bitcast	%1562 
%1586:	ptrtoint	%1585 
%1587:	and	%1586 XXX 
%1588:	add	%1587 XXX 
%1589:	inttoptr	%1588 
%1590:	br	cond.end 

BASIC BLOCK cond.end
%1591:	phi	XXX %1589 
%1592:	br	cond.end7 

BASIC BLOCK cond.end7
%1593:	phi	XXX %1591 
%1594:	call	XXX XXX XXX XXX llvm.dbg.value 
%1595:	br	while.cond 

BASIC BLOCK while.cond
%1596:	load	%1562 
%1597:	icmp	%1570 %1596 
%1598:	br	%1597 land.end land.rhs 

BASIC BLOCK land.rhs
%1599:	load	%1562 
%1600:	icmp	%1599 %1593 
%1601:	br	land.end 

BASIC BLOCK land.end
%1602:	phi	XXX %1600 
%1603:	br	%1602 while.end while.body 

BASIC BLOCK while.body
%1604:	load	%1562 
%1605:	icmp	%1604 addr 
%1606:	br	%1605 if.end13 if.then12 

BASIC BLOCK if.then12
%1607:	load	%1562 
%1608:	ptrtoint	%1607 
%1609:	ptrtoint	addr 
%1610:	sub	%1608 %1609 
%1611:	call	XXX XXX XXX XXX llvm.dbg.value 
%1612:	br	while.end 

BASIC BLOCK if.end13
%1613:	load	%1562 
%1614:	bitcast	%1613 
%1615:	load	%1614 
%1616:	call	XXX XXX XXX XXX llvm.dbg.value 
%1617:	ptrtoint	%1615 
%1618:	and	%1617 XXX 
%1619:	icmp	%1618 XXX 
%1620:	br	%1619 if.end17 if.then16 

BASIC BLOCK if.then16
%1621:	store	XXX _libsafe_exclude 
%1622:	br	return 

BASIC BLOCK if.end17
%1623:	load	%1562 
%1624:	icmp	%1615 %1623 
%1625:	br	%1624 if.end20 if.then19 

BASIC BLOCK if.then19
%1626:	store	XXX _libsafe_exclude 
%1627:	br	return 

BASIC BLOCK if.end20
%1628:	store	%1615 %1562 
%1629:	br	while.cond 

BASIC BLOCK while.end
%1630:	phi	%1610 XXX 
%1631:	icmp	%1630 XXX 
%1632:	br	%1631 if.end23 if.then22 

BASIC BLOCK if.then22
%1633:	br	return 

BASIC BLOCK if.end23
%1634:	br	while.cond24 

BASIC BLOCK while.cond24
%1635:	load	%1562 
%1636:	icmp	%1570 %1635 
%1637:	br	%1636 land.end28 land.rhs26 

BASIC BLOCK land.rhs26
%1638:	load	%1562 
%1639:	icmp	%1638 %1593 
%1640:	br	land.end28 

BASIC BLOCK land.end28
%1641:	phi	XXX %1639 
%1642:	br	%1641 while.end40 while.body29 

BASIC BLOCK while.body29
%1643:	load	%1562 
%1644:	bitcast	%1643 
%1645:	load	%1644 
%1646:	call	XXX XXX XXX XXX llvm.dbg.value 
%1647:	icmp	%1645 XXX 
%1648:	br	%1647 if.end32 if.then31 

BASIC BLOCK if.then31
%1649:	br	return 

BASIC BLOCK if.end32
%1650:	ptrtoint	%1645 
%1651:	and	%1650 XXX 
%1652:	icmp	%1651 XXX 
%1653:	br	%1652 if.end36 if.then35 

BASIC BLOCK if.then35
%1654:	store	XXX _libsafe_exclude 
%1655:	br	return 

BASIC BLOCK if.end36
%1656:	load	%1562 
%1657:	icmp	%1645 %1656 
%1658:	br	%1657 if.end39 if.then38 

BASIC BLOCK if.then38
%1659:	store	XXX _libsafe_exclude 
%1660:	br	return 

BASIC BLOCK if.end39
%1661:	store	%1645 %1562 
%1662:	br	while.cond24 

BASIC BLOCK while.end40
%1663:	br	return 

BASIC BLOCK return
%1664:	phi	XXX XXX XXX %1630 XXX XXX XXX XXX XXX 
%1665:	ret	%1664 

FUNCTION llvm.frameaddress

FUNCTION _libsafe_save_ra_fp

BASIC BLOCK entry
%1666:	alloca	XXX 
%1667:	call	XXX XXX XXX XXX llvm.dbg.value 
%1668:	call	XXX XXX XXX XXX llvm.dbg.value 
%1669:	call	XXX XXX XXX XXX llvm.dbg.value 
%1670:	call	XXX XXX XXX XXX llvm.dbg.value 
%1671:	call	XXX XXX XXX XXX llvm.dbg.value 
%1672:	call	XXX XXX XXX XXX llvm.dbg.value 
%1673:	call	XXX XXX XXX llvm.dbg.declare 
%1674:	load	dying 
%1675:	icmp	%1674 XXX 
%1676:	br	%1675 if.end if.then 

BASIC BLOCK if.then
%1677:	br	return 

BASIC BLOCK if.end
%1678:	bitcast	%1666 
%1679:	call	XXX XXX XXX XXX llvm.dbg.value 
%1680:	call	XXX llvm.frameaddress 
%1681:	store	%1680 %1666 
%1682:	load	%1666 
%1683:	icmp	%1682 %1678 
%1684:	br	%1683 if.end2 if.then1 

BASIC BLOCK if.then1
%1685:	br	return 

BASIC BLOCK if.end2
%1686:	bitcast	%1666 
%1687:	icmp	%1686 XXX 
%1688:	br	%1687 cond.false cond.true 

BASIC BLOCK cond.true
%1689:	br	cond.end7 

BASIC BLOCK cond.false
%1690:	bitcast	%1666 
%1691:	icmp	%1690 XXX 
%1692:	br	%1691 cond.false6 cond.true5 

BASIC BLOCK cond.true5
%1693:	br	cond.end 

BASIC BLOCK cond.false6
%1694:	bitcast	%1666 
%1695:	ptrtoint	%1694 
%1696:	and	%1695 XXX 
%1697:	add	%1696 XXX 
%1698:	inttoptr	%1697 
%1699:	br	cond.end 

BASIC BLOCK cond.end
%1700:	phi	XXX %1698 
%1701:	br	cond.end7 

BASIC BLOCK cond.end7
%1702:	phi	XXX %1700 
%1703:	call	XXX XXX XXX XXX llvm.dbg.value 
%1704:	br	while.cond 

BASIC BLOCK while.cond
%1705:	phi	XXX %1726 
%1706:	phi	ra_array %1719 
%1707:	phi	fp_array %1723 
%1708:	load	%1666 
%1709:	icmp	%1708 %1702 
%1710:	br	%1709 while.end while.body 

BASIC BLOCK while.body
%1711:	add	%1705 XXX 
%1712:	icmp	%1711 maxcount 
%1713:	br	%1712 if.end13 if.then12 

BASIC BLOCK if.then12
%1714:	br	return 

BASIC BLOCK if.end13
%1715:	load	%1666 
%1716:	getelementptr	%1715 XXX 
%1717:	bitcast	%1716 
%1718:	load	%1717 
%1719:	getelementptr	%1706 XXX 
%1720:	call	XXX XXX XXX XXX llvm.dbg.value 
%1721:	store	%1718 %1706 
%1722:	load	%1666 
%1723:	getelementptr	%1707 XXX 
%1724:	call	XXX XXX XXX XXX llvm.dbg.value 
%1725:	store	%1722 %1707 
%1726:	add	%1705 XXX 
%1727:	call	XXX XXX XXX XXX llvm.dbg.value 
%1728:	load	%1666 
%1729:	bitcast	%1728 
%1730:	load	%1729 
%1731:	call	XXX XXX XXX XXX llvm.dbg.value 
%1732:	icmp	%1730 XXX 
%1733:	br	%1732 if.end17 if.then16 

BASIC BLOCK if.then16
%1734:	br	return 

BASIC BLOCK if.end17
%1735:	ptrtoint	%1730 
%1736:	and	%1735 XXX 
%1737:	icmp	%1736 XXX 
%1738:	br	%1737 if.end21 if.then20 

BASIC BLOCK if.then20
%1739:	store	XXX _libsafe_exclude 
%1740:	br	return 

BASIC BLOCK if.end21
%1741:	load	%1666 
%1742:	icmp	%1730 %1741 
%1743:	br	%1742 if.end24 if.then23 

BASIC BLOCK if.then23
%1744:	store	XXX _libsafe_exclude 
%1745:	br	return 

BASIC BLOCK if.end24
%1746:	store	%1730 %1666 
%1747:	br	while.cond 

BASIC BLOCK while.end
%1748:	br	return 

BASIC BLOCK return
%1749:	phi	XXX XXX XXX %1726 XXX XXX XXX 
%1750:	ret	%1749 

FUNCTION _libsafe_verify_ra_fp

BASIC BLOCK entry
%1751:	alloca	XXX 
%1752:	call	XXX XXX XXX XXX llvm.dbg.value 
%1753:	call	XXX XXX XXX XXX llvm.dbg.value 
%1754:	call	XXX XXX XXX XXX llvm.dbg.value 
%1755:	call	XXX XXX XXX XXX llvm.dbg.value 
%1756:	call	XXX XXX XXX XXX llvm.dbg.value 
%1757:	call	XXX XXX XXX XXX llvm.dbg.value 
%1758:	call	XXX XXX XXX llvm.dbg.declare 
%1759:	load	dying 
%1760:	icmp	%1759 XXX 
%1761:	br	%1760 if.end if.then 

BASIC BLOCK if.then
%1762:	br	return 

BASIC BLOCK if.end
%1763:	bitcast	%1751 
%1764:	call	XXX XXX XXX XXX llvm.dbg.value 
%1765:	call	XXX llvm.frameaddress 
%1766:	store	%1765 %1751 
%1767:	load	%1751 
%1768:	icmp	%1767 %1763 
%1769:	br	%1768 if.end2 if.then1 

BASIC BLOCK if.then1
%1770:	br	return 

BASIC BLOCK if.end2
%1771:	bitcast	%1751 
%1772:	icmp	%1771 XXX 
%1773:	br	%1772 cond.false cond.true 

BASIC BLOCK cond.true
%1774:	br	cond.end7 

BASIC BLOCK cond.false
%1775:	bitcast	%1751 
%1776:	icmp	%1775 XXX 
%1777:	br	%1776 cond.false6 cond.true5 

BASIC BLOCK cond.true5
%1778:	br	cond.end 

BASIC BLOCK cond.false6
%1779:	bitcast	%1751 
%1780:	ptrtoint	%1779 
%1781:	and	%1780 XXX 
%1782:	add	%1781 XXX 
%1783:	inttoptr	%1782 
%1784:	br	cond.end 

BASIC BLOCK cond.end
%1785:	phi	XXX %1783 
%1786:	br	cond.end7 

BASIC BLOCK cond.end7
%1787:	phi	XXX %1785 
%1788:	call	XXX XXX XXX XXX llvm.dbg.value 
%1789:	br	while.cond 

BASIC BLOCK while.cond
%1790:	phi	XXX %1811 
%1791:	phi	ra_array %1796 
%1792:	phi	fp_array %1805 
%1793:	load	%1751 
%1794:	icmp	%1793 %1787 
%1795:	br	%1794 while.end while.body 

BASIC BLOCK while.body
%1796:	getelementptr	%1791 XXX 
%1797:	call	XXX XXX XXX XXX llvm.dbg.value 
%1798:	load	%1791 
%1799:	load	%1751 
%1800:	getelementptr	%1799 XXX 
%1801:	bitcast	%1800 
%1802:	load	%1801 
%1803:	icmp	%1798 %1802 
%1804:	br	%1803 lor.lhs.false if.then15 

BASIC BLOCK lor.lhs.false
%1805:	getelementptr	%1792 XXX 
%1806:	call	XXX XXX XXX XXX llvm.dbg.value 
%1807:	load	%1792 
%1808:	load	%1751 
%1809:	icmp	%1807 %1808 
%1810:	br	%1809 lor.lhs.false13 if.then15 

BASIC BLOCK lor.lhs.false13
%1811:	add	%1790 XXX 
%1812:	call	XXX XXX XXX XXX llvm.dbg.value 
%1813:	icmp	%1790 maxcount 
%1814:	br	%1813 if.end20 if.then15 

BASIC BLOCK if.then15
%1815:	phi	%1790 %1790 %1811 
%1816:	br	for.cond 

BASIC BLOCK for.cond
%1817:	phi	%1815 %1832 
%1818:	icmp	%1817 maxcount 
%1819:	br	%1818 for.end for.body 

BASIC BLOCK for.body
%1820:	getelementptr	ra_array %1817 
%1821:	load	%1820 
%1822:	load	%1751 
%1823:	getelementptr	%1822 XXX 
%1824:	bitcast	%1823 
%1825:	store	%1821 %1824 
%1826:	getelementptr	fp_array %1817 
%1827:	load	%1826 
%1828:	load	%1751 
%1829:	bitcast	%1828 
%1830:	store	%1827 %1829 
%1831:	br	for.inc 

BASIC BLOCK for.inc
%1832:	add	%1817 XXX 
%1833:	call	XXX XXX XXX XXX llvm.dbg.value 
%1834:	br	for.cond 

BASIC BLOCK for.end
%1835:	br	return 

BASIC BLOCK if.end20
%1836:	load	%1751 
%1837:	bitcast	%1836 
%1838:	load	%1837 
%1839:	call	XXX XXX XXX XXX llvm.dbg.value 
%1840:	icmp	%1838 XXX 
%1841:	br	%1840 if.end23 if.then22 

BASIC BLOCK if.then22
%1842:	br	return 

BASIC BLOCK if.end23
%1843:	store	%1838 %1751 
%1844:	br	while.cond 

BASIC BLOCK while.end
%1845:	br	return 

BASIC BLOCK return
%1846:	phi	XXX XXX XXX XXX XXX 
%1847:	ret	%1846 

FUNCTION _libsafe_raVariableP

BASIC BLOCK entry
%1848:	alloca	XXX 
%1849:	call	XXX XXX XXX XXX llvm.dbg.value 
%1850:	call	XXX XXX XXX XXX llvm.dbg.value 
%1851:	call	XXX XXX XXX llvm.dbg.declare 
%1852:	load	dying 
%1853:	icmp	%1852 XXX 
%1854:	br	%1853 if.end if.then 

BASIC BLOCK if.then
%1855:	br	return 

BASIC BLOCK if.end
%1856:	bitcast	%1848 
%1857:	call	XXX XXX XXX XXX llvm.dbg.value 
%1858:	icmp	%1856 addr 
%1859:	br	%1858 if.end2 if.then1 

BASIC BLOCK if.then1
%1860:	br	return 

BASIC BLOCK if.end2
%1861:	call	XXX llvm.frameaddress 
%1862:	store	%1861 %1848 
%1863:	bitcast	%1848 
%1864:	icmp	%1863 XXX 
%1865:	br	%1864 cond.false cond.true 

BASIC BLOCK cond.true
%1866:	br	cond.end7 

BASIC BLOCK cond.false
%1867:	bitcast	%1848 
%1868:	icmp	%1867 XXX 
%1869:	br	%1868 cond.false6 cond.true5 

BASIC BLOCK cond.true5
%1870:	br	cond.end 

BASIC BLOCK cond.false6
%1871:	bitcast	%1848 
%1872:	ptrtoint	%1871 
%1873:	and	%1872 XXX 
%1874:	add	%1873 XXX 
%1875:	inttoptr	%1874 
%1876:	br	cond.end 

BASIC BLOCK cond.end
%1877:	phi	XXX %1875 
%1878:	br	cond.end7 

BASIC BLOCK cond.end7
%1879:	phi	XXX %1877 
%1880:	call	XXX XXX XXX XXX llvm.dbg.value 
%1881:	br	while.cond 

BASIC BLOCK while.cond
%1882:	load	%1848 
%1883:	icmp	%1856 %1882 
%1884:	br	%1883 land.end land.rhs 

BASIC BLOCK land.rhs
%1885:	load	%1848 
%1886:	icmp	%1885 %1879 
%1887:	br	land.end 

BASIC BLOCK land.end
%1888:	phi	XXX %1886 
%1889:	br	%1888 while.end while.body 

BASIC BLOCK while.body
%1890:	load	%1848 
%1891:	icmp	%1890 addr 
%1892:	br	%1891 lor.lhs.false if.then13 

BASIC BLOCK lor.lhs.false
%1893:	load	%1848 
%1894:	getelementptr	%1893 XXX 
%1895:	icmp	%1894 addr 
%1896:	br	%1895 if.end14 if.then13 

BASIC BLOCK if.then13
%1897:	call	XXX XXX XXX XXX llvm.dbg.value 
%1898:	br	while.end 

BASIC BLOCK if.end14
%1899:	load	%1848 
%1900:	bitcast	%1899 
%1901:	load	%1900 
%1902:	call	XXX XXX XXX XXX llvm.dbg.value 
%1903:	ptrtoint	%1901 
%1904:	and	%1903 XXX 
%1905:	icmp	%1904 XXX 
%1906:	br	%1905 if.end18 if.then17 

BASIC BLOCK if.then17
%1907:	br	return 

BASIC BLOCK if.end18
%1908:	load	%1848 
%1909:	icmp	%1901 %1908 
%1910:	br	%1909 if.end21 if.then20 

BASIC BLOCK if.then20
%1911:	br	return 

BASIC BLOCK if.end21
%1912:	store	%1901 %1848 
%1913:	br	while.cond 

BASIC BLOCK while.end
%1914:	phi	XXX XXX 
%1915:	icmp	%1914 XXX 
%1916:	br	%1915 if.end24 if.then23 

BASIC BLOCK if.then23
%1917:	br	return 

BASIC BLOCK if.end24
%1918:	br	while.cond25 

BASIC BLOCK while.cond25
%1919:	load	%1848 
%1920:	icmp	%1856 %1919 
%1921:	br	%1920 land.end29 land.rhs27 

BASIC BLOCK land.rhs27
%1922:	load	%1848 
%1923:	icmp	%1922 %1879 
%1924:	br	land.end29 

BASIC BLOCK land.end29
%1925:	phi	XXX %1923 
%1926:	br	%1925 while.end41 while.body30 

BASIC BLOCK while.body30
%1927:	load	%1848 
%1928:	bitcast	%1927 
%1929:	load	%1928 
%1930:	call	XXX XXX XXX XXX llvm.dbg.value 
%1931:	icmp	%1929 XXX 
%1932:	br	%1931 if.end33 if.then32 

BASIC BLOCK if.then32
%1933:	br	return 

BASIC BLOCK if.end33
%1934:	ptrtoint	%1929 
%1935:	and	%1934 XXX 
%1936:	icmp	%1935 XXX 
%1937:	br	%1936 if.end37 if.then36 

BASIC BLOCK if.then36
%1938:	br	return 

BASIC BLOCK if.end37
%1939:	load	%1848 
%1940:	icmp	%1929 %1939 
%1941:	br	%1940 if.end40 if.then39 

BASIC BLOCK if.then39
%1942:	br	return 

BASIC BLOCK if.end40
%1943:	store	%1929 %1848 
%1944:	br	while.cond25 

BASIC BLOCK while.end41
%1945:	br	return 

BASIC BLOCK return
%1946:	phi	XXX XXX XXX %1914 XXX XXX XXX XXX XXX 
%1947:	ret	%1946 

FUNCTION _libsafe_warn

BASIC BLOCK entry
%1948:	alloca	XXX 
%1949:	alloca	XXX 
%1950:	alloca	XXX 
%1951:	call	XXX XXX XXX XXX llvm.dbg.value 
%1952:	call	XXX XXX XXX llvm.dbg.declare 
%1953:	call	XXX XXX XXX llvm.dbg.declare 
%1954:	call	XXX XXX XXX llvm.dbg.declare 
%1955:	store	XXX dying 
%1956:	getelementptr	%1948 XXX XXX 
%1957:	call	%1956 XXX get_exename11 
%1958:	bitcast	%1949 
%1959:	call	%1958 llvm.va_start 
%1960:	call	%1950 get_memory_maps 
%1961:	call	XXX XXX XXX XXX llvm.dbg.value 
%1962:	call	XXX XXX XXX openlog 
%1963:	call	XXX XXX XXX syslog 
%1964:	call	XXX XXX syslog 
%1965:	getelementptr	%1948 XXX XXX 
%1966:	call	XXX XXX %1965 syslog 
%1967:	call	getuid 
%1968:	call	geteuid 
%1969:	call	getpid 
%1970:	call	XXX XXX %1967 %1968 %1969 syslog 
%1971:	load	stderr 
%1972:	call	%1971 XXX XXX fprintf 
%1973:	load	stderr 
%1974:	call	%1973 XXX fprintf 
%1975:	load	stderr 
%1976:	getelementptr	%1948 XXX XXX 
%1977:	call	%1975 XXX %1976 fprintf 
%1978:	load	stderr 
%1979:	call	getuid 
%1980:	call	geteuid 
%1981:	call	getpid 
%1982:	call	%1978 XXX %1979 %1980 %1981 fprintf 
%1983:	call	XXX XXX syslog 
%1984:	load	stderr 
%1985:	call	%1984 XXX fprintf 
%1986:	call	XXX llvm.frameaddress 
%1987:	call	XXX XXX XXX XXX llvm.dbg.value 
%1988:	br	for.cond 

BASIC BLOCK for.cond
%1989:	phi	%1986 %2016 
%1990:	load	%1989 
%1991:	icmp	%1990 XXX 
%1992:	br	%1991 for.end for.body 

BASIC BLOCK for.body
%1993:	getelementptr	%1989 XXX 
%1994:	bitcast	%1993 
%1995:	load	%1994 
%1996:	call	XXX XXX XXX XXX llvm.dbg.value 
%1997:	ptrtoint	%1995 
%1998:	sub	%1997 XXX 
%1999:	inttoptr	%1998 
%2000:	call	XXX XXX XXX XXX llvm.dbg.value 
%2001:	load	%1950 
%2002:	call	%2001 %1960 %1999 find_caller_addr 
%2003:	call	XXX XXX XXX XXX llvm.dbg.value 
%2004:	load	%1950 
%2005:	getelementptr	%2004 %2002 
%2006:	getelementptr	%2005 XXX XXX 
%2007:	load	%2006 
%2008:	call	XXX XXX %1999 %2007 syslog 
%2009:	load	stderr 
%2010:	load	%1950 
%2011:	getelementptr	%2010 %2002 
%2012:	getelementptr	%2011 XXX XXX 
%2013:	load	%2012 
%2014:	call	%2009 XXX %1999 %2013 fprintf 
%2015:	bitcast	%1989 
%2016:	load	%2015 
%2017:	call	XXX XXX XXX XXX llvm.dbg.value 
%2018:	call	%1989 %2016 check_nextfp 
%2019:	icmp	%2018 XXX 
%2020:	br	%2019 if.end if.then 

BASIC BLOCK if.then
%2021:	br	for.end 

BASIC BLOCK if.end
%2022:	br	for.inc 

BASIC BLOCK for.inc
%2023:	call	XXX XXX XXX XXX llvm.dbg.value 
%2024:	br	for.cond 

BASIC BLOCK for.end
%2025:	load	%1949 
%2026:	call	XXX format %2025 syslog 
%2027:	load	stderr 
%2028:	load	%1949 
%2029:	call	%2027 format %2028 vfprintf 
%2030:	load	stderr 
%2031:	call	%2030 XXX fprintf 
%2032:	bitcast	%1949 
%2033:	call	%2032 llvm.va_end 
%2034:	load	%1950 
%2035:	icmp	%2034 XXX 
%2036:	br	%2035 if.end27 if.then26 

BASIC BLOCK if.then26
%2037:	load	%1950 
%2038:	bitcast	%2037 
%2039:	call	%2038 free 
%2040:	br	if.end27 

BASIC BLOCK if.end27
%2041:	store	XXX dying 
%2042:	ret	

FUNCTION openlog

FUNCTION syslog

FUNCTION getuid

FUNCTION getpid

FUNCTION free

FUNCTION _libsafe_die

BASIC BLOCK entry
%2043:	alloca	XXX 
%2044:	call	XXX XXX XXX XXX llvm.dbg.value 
%2045:	call	XXX XXX XXX llvm.dbg.declare 
%2046:	store	XXX dying 
%2047:	bitcast	%2043 
%2048:	call	%2047 llvm.va_start 
%2049:	load	%2043 
%2050:	call	format %2049 _libsafe_warn 
%2051:	bitcast	%2043 
%2052:	call	%2051 llvm.va_end 
%2053:	call	XXX raise 
%2054:	ret	

FUNCTION raise

FUNCTION malloc

FUNCTION __isoc99_sscanf

FUNCTION strchr

FUNCTION strdup

FUNCTION get_exename11

BASIC BLOCK entry
%2055:	call	XXX XXX XXX XXX llvm.dbg.value 
%2056:	call	XXX XXX XXX XXX llvm.dbg.value 
%2057:	sub	size XXX 
%2058:	call	XXX exename %2057 readlink 
%2059:	call	XXX XXX XXX XXX llvm.dbg.value 
%2060:	icmp	%2058 XXX 
%2061:	br	%2060 if.else if.then 

BASIC BLOCK if.then
%2062:	getelementptr	exename XXX 
%2063:	store	XXX %2062 
%2064:	br	if.end 

BASIC BLOCK if.else
%2065:	getelementptr	exename %2058 
%2066:	store	XXX %2065 
%2067:	br	if.end 

BASIC BLOCK if.end
%2068:	ret	exename 

FUNCTION get_memory_maps

BASIC BLOCK entry
%2069:	alloca	XXX 
%2070:	alloca	XXX 
%2071:	call	XXX XXX XXX XXX llvm.dbg.value 
%2072:	call	XXX XXX XXX XXX llvm.dbg.value 
%2073:	call	XXX XXX XXX llvm.dbg.declare 
%2074:	call	XXX XXX XXX llvm.dbg.declare 
%2075:	getelementptr	%2069 XXX XXX 
%2076:	call	getpid 
%2077:	call	%2075 XXX XXX %2076 snprintf 
%2078:	getelementptr	%2069 XXX XXX 
%2079:	call	%2078 XXX fopen 
%2080:	call	XXX XXX XXX XXX llvm.dbg.value 
%2081:	icmp	%2079 XXX 
%2082:	br	%2081 if.end if.then 

BASIC BLOCK if.then
%2083:	br	return 

BASIC BLOCK if.end
%2084:	call	XXX XXX XXX XXX llvm.dbg.value 
%2085:	br	while.cond 

BASIC BLOCK while.cond
%2086:	phi	XXX %2091 
%2087:	getelementptr	%2070 XXX XXX 
%2088:	call	%2087 XXX %2079 fgets 
%2089:	icmp	%2088 XXX 
%2090:	br	%2089 while.end while.body 

BASIC BLOCK while.body
%2091:	add	%2086 XXX 
%2092:	call	XXX XXX XXX XXX llvm.dbg.value 
%2093:	br	while.cond 

BASIC BLOCK while.end
%2094:	call	%2079 fclose 
%2095:	mul	%2086 XXX 
%2096:	call	%2095 malloc 
%2097:	bitcast	%2096 
%2098:	call	XXX XXX XXX XXX llvm.dbg.value 
%2099:	store	%2097 mapsptr 
%2100:	getelementptr	%2069 XXX XXX 
%2101:	call	%2100 XXX fopen 
%2102:	call	XXX XXX XXX XXX llvm.dbg.value 
%2103:	icmp	%2101 XXX 
%2104:	br	%2103 if.end15 if.then11 

BASIC BLOCK if.then11
%2105:	icmp	%2097 XXX 
%2106:	br	%2105 if.end14 if.then13 

BASIC BLOCK if.then13
%2107:	bitcast	%2097 
%2108:	call	%2107 free 
%2109:	br	if.end14 

BASIC BLOCK if.end14
%2110:	br	return 

BASIC BLOCK if.end15
%2111:	call	XXX XXX XXX XXX llvm.dbg.value 
%2112:	br	while.cond16 

BASIC BLOCK while.cond16
%2113:	phi	XXX %2151 
%2114:	getelementptr	%2070 XXX XXX 
%2115:	call	%2114 XXX %2101 fgets 
%2116:	icmp	%2115 XXX 
%2117:	br	%2116 land.end land.rhs 

BASIC BLOCK land.rhs
%2118:	icmp	%2113 %2086 
%2119:	br	land.end 

BASIC BLOCK land.end
%2120:	phi	XXX %2118 
%2121:	br	%2120 while.end41 while.body21 

BASIC BLOCK while.body21
%2122:	getelementptr	%2070 XXX XXX 
%2123:	getelementptr	%2097 %2113 
%2124:	getelementptr	%2123 XXX XXX 
%2125:	getelementptr	%2097 %2113 
%2126:	getelementptr	%2125 XXX XXX 
%2127:	call	%2122 XXX %2124 %2126 __isoc99_sscanf 
%2128:	getelementptr	%2070 XXX XXX 
%2129:	call	%2128 XXX strchr 
%2130:	call	XXX XXX XXX XXX llvm.dbg.value 
%2131:	icmp	%2129 XXX 
%2132:	br	%2131 if.else if.then28 

BASIC BLOCK if.then28
%2133:	call	%2129 strdup 
%2134:	getelementptr	%2097 %2113 
%2135:	getelementptr	%2134 XXX XXX 
%2136:	store	%2133 %2135 
%2137:	getelementptr	%2097 %2113 
%2138:	getelementptr	%2137 XXX XXX 
%2139:	load	%2138 
%2140:	call	%2139 XXX strchr 
%2141:	call	XXX XXX XXX XXX llvm.dbg.value 
%2142:	icmp	%2140 XXX 
%2143:	br	%2142 if.end36 if.then35 

BASIC BLOCK if.then35
%2144:	store	XXX %2140 
%2145:	br	if.end36 

BASIC BLOCK if.end36
%2146:	br	if.end39 

BASIC BLOCK if.else
%2147:	getelementptr	%2097 %2113 
%2148:	getelementptr	%2147 XXX XXX 
%2149:	store	XXX %2148 
%2150:	br	if.end39 

BASIC BLOCK if.end39
%2151:	add	%2113 XXX 
%2152:	call	XXX XXX XXX XXX llvm.dbg.value 
%2153:	br	while.cond16 

BASIC BLOCK while.end41
%2154:	call	%2101 fclose 
%2155:	br	return 

BASIC BLOCK return
%2156:	phi	XXX XXX %2086 
%2157:	ret	%2156 

FUNCTION find_caller_addr

BASIC BLOCK entry
%2158:	call	XXX XXX XXX XXX llvm.dbg.value 
%2159:	call	XXX XXX XXX XXX llvm.dbg.value 
%2160:	call	XXX XXX XXX XXX llvm.dbg.value 
%2161:	call	XXX XXX XXX XXX llvm.dbg.value 
%2162:	br	for.cond 

BASIC BLOCK for.cond
%2163:	phi	XXX %2178 
%2164:	icmp	%2163 count 
%2165:	br	%2164 for.end for.body 

BASIC BLOCK for.body
%2166:	getelementptr	maps %2163 
%2167:	getelementptr	%2166 XXX XXX 
%2168:	load	%2167 
%2169:	icmp	caller_addr %2168 
%2170:	br	%2169 if.end land.lhs.true 

BASIC BLOCK land.lhs.true
%2171:	getelementptr	maps %2163 
%2172:	getelementptr	%2171 XXX XXX 
%2173:	load	%2172 
%2174:	icmp	caller_addr %2173 
%2175:	br	%2174 if.end if.then 

BASIC BLOCK if.then
%2176:	br	return 

BASIC BLOCK if.end
%2177:	br	for.inc 

BASIC BLOCK for.inc
%2178:	add	%2163 XXX 
%2179:	call	XXX XXX XXX XXX llvm.dbg.value 
%2180:	br	for.cond 

BASIC BLOCK for.end
%2181:	br	return 

BASIC BLOCK return
%2182:	phi	%2163 XXX 
%2183:	ret	%2182 

FUNCTION check_nextfp

BASIC BLOCK entry
%2184:	alloca	XXX 
%2185:	store	fp %2184 
%2186:	call	XXX XXX XXX llvm.dbg.declare 
%2187:	call	XXX XXX XXX XXX llvm.dbg.value 
%2188:	bitcast	%2184 
%2189:	icmp	%2188 XXX 
%2190:	br	%2189 cond.false cond.true 

BASIC BLOCK cond.true
%2191:	br	cond.end4 

BASIC BLOCK cond.false
%2192:	bitcast	%2184 
%2193:	icmp	%2192 XXX 
%2194:	br	%2193 cond.false3 cond.true2 

BASIC BLOCK cond.true2
%2195:	br	cond.end 

BASIC BLOCK cond.false3
%2196:	bitcast	%2184 
%2197:	ptrtoint	%2196 
%2198:	and	%2197 XXX 
%2199:	add	%2198 XXX 
%2200:	inttoptr	%2199 
%2201:	br	cond.end 

BASIC BLOCK cond.end
%2202:	phi	XXX %2200 
%2203:	br	cond.end4 

BASIC BLOCK cond.end4
%2204:	phi	XXX %2202 
%2205:	call	XXX XXX XXX XXX llvm.dbg.value 
%2206:	icmp	nextfp %2204 
%2207:	br	%2206 if.end if.then 

BASIC BLOCK if.then
%2208:	store	XXX _libsafe_exclude 
%2209:	br	return 

BASIC BLOCK if.end
%2210:	ptrtoint	nextfp 
%2211:	and	%2210 XXX 
%2212:	icmp	%2211 XXX 
%2213:	br	%2212 if.end9 if.then8 

BASIC BLOCK if.then8
%2214:	store	XXX _libsafe_exclude 
%2215:	br	return 

BASIC BLOCK if.end9
%2216:	load	%2184 
%2217:	icmp	nextfp %2216 
%2218:	br	%2217 if.end12 if.then11 

BASIC BLOCK if.then11
%2219:	store	XXX _libsafe_exclude 
%2220:	br	return 

BASIC BLOCK if.end12
%2221:	br	return 

BASIC BLOCK return
%2222:	phi	XXX XXX XXX XXX 
%2223:	ret	%2222 
------------- Part 1 Result ----------------
[ 23 ]
------------- Part 2 Result ----------------
[ ]
------------- Part 3 Result ----------------
[ ]
