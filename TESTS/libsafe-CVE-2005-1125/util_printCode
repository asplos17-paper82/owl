make[1]: warning: jobserver unavailable: using -j1.  Add `+' to parent make rule.

FUNCTION _libsafe_stackVariableP

BASIC BLOCK entry
%1:	alloca	XXX 
%2:	call	XXX XXX XXX XXX llvm.dbg.value 
%3:	call	XXX XXX XXX XXX llvm.dbg.value 
%4:	call	XXX XXX XXX llvm.dbg.declare 
%5:	load	dying 
%6:	icmp	%5 XXX 
%7:	br	%6 if.end if.then 

BASIC BLOCK if.then
%8:	br	return 

BASIC BLOCK if.end
%9:	bitcast	%1 
%10:	call	XXX XXX XXX XXX llvm.dbg.value 
%11:	icmp	%9 addr 
%12:	br	%11 if.end2 if.then1 

BASIC BLOCK if.then1
%13:	br	return 

BASIC BLOCK if.end2
%14:	call	XXX llvm.frameaddress 
%15:	store	%14 %1 
%16:	bitcast	%1 
%17:	icmp	%16 XXX 
%18:	br	%17 cond.false cond.true 

BASIC BLOCK cond.true
%19:	br	cond.end7 

BASIC BLOCK cond.false
%20:	bitcast	%1 
%21:	icmp	%20 XXX 
%22:	br	%21 cond.false6 cond.true5 

BASIC BLOCK cond.true5
%23:	br	cond.end 

BASIC BLOCK cond.false6
%24:	bitcast	%1 
%25:	ptrtoint	%24 
%26:	and	%25 XXX 
%27:	add	%26 XXX 
%28:	inttoptr	%27 
%29:	br	cond.end 

BASIC BLOCK cond.end
%30:	phi	XXX %28 
%31:	br	cond.end7 

BASIC BLOCK cond.end7
%32:	phi	XXX %30 
%33:	call	XXX XXX XXX XXX llvm.dbg.value 
%34:	br	while.cond 

BASIC BLOCK while.cond
%35:	load	%1 
%36:	icmp	%9 %35 
%37:	br	%36 land.end land.rhs 

BASIC BLOCK land.rhs
%38:	load	%1 
%39:	icmp	%38 %32 
%40:	br	land.end 

BASIC BLOCK land.end
%41:	phi	XXX %39 
%42:	br	%41 while.end while.body 

BASIC BLOCK while.body
%43:	load	%1 
%44:	icmp	%43 addr 
%45:	br	%44 if.end13 if.then12 

BASIC BLOCK if.then12
%46:	load	%1 
%47:	ptrtoint	%46 
%48:	ptrtoint	addr 
%49:	sub	%47 %48 
%50:	call	XXX XXX XXX XXX llvm.dbg.value 
%51:	br	while.end 

BASIC BLOCK if.end13
%52:	load	%1 
%53:	bitcast	%52 
%54:	load	%53 
%55:	call	XXX XXX XXX XXX llvm.dbg.value 
%56:	ptrtoint	%54 
%57:	and	%56 XXX 
%58:	icmp	%57 XXX 
%59:	br	%58 if.end17 if.then16 

BASIC BLOCK if.then16
%60:	store	XXX _libsafe_exclude 
%61:	br	return 

BASIC BLOCK if.end17
%62:	load	%1 
%63:	icmp	%54 %62 
%64:	br	%63 if.end20 if.then19 

BASIC BLOCK if.then19
%65:	store	XXX _libsafe_exclude 
%66:	br	return 

BASIC BLOCK if.end20
%67:	store	%54 %1 
%68:	br	while.cond 

BASIC BLOCK while.end
%69:	phi	%49 XXX 
%70:	icmp	%69 XXX 
%71:	br	%70 if.end23 if.then22 

BASIC BLOCK if.then22
%72:	br	return 

BASIC BLOCK if.end23
%73:	br	while.cond24 

BASIC BLOCK while.cond24
%74:	load	%1 
%75:	icmp	%9 %74 
%76:	br	%75 land.end28 land.rhs26 

BASIC BLOCK land.rhs26
%77:	load	%1 
%78:	icmp	%77 %32 
%79:	br	land.end28 

BASIC BLOCK land.end28
%80:	phi	XXX %78 
%81:	br	%80 while.end40 while.body29 

BASIC BLOCK while.body29
%82:	load	%1 
%83:	bitcast	%82 
%84:	load	%83 
%85:	call	XXX XXX XXX XXX llvm.dbg.value 
%86:	icmp	%84 XXX 
%87:	br	%86 if.end32 if.then31 

BASIC BLOCK if.then31
%88:	br	return 

BASIC BLOCK if.end32
%89:	ptrtoint	%84 
%90:	and	%89 XXX 
%91:	icmp	%90 XXX 
%92:	br	%91 if.end36 if.then35 

BASIC BLOCK if.then35
%93:	store	XXX _libsafe_exclude 
%94:	br	return 

BASIC BLOCK if.end36
%95:	load	%1 
%96:	icmp	%84 %95 
%97:	br	%96 if.end39 if.then38 

BASIC BLOCK if.then38
%98:	store	XXX _libsafe_exclude 
%99:	br	return 

BASIC BLOCK if.end39
%100:	store	%84 %1 
%101:	br	while.cond24 

BASIC BLOCK while.end40
%102:	br	return 

BASIC BLOCK return
%103:	phi	XXX XXX XXX %69 XXX XXX XXX XXX XXX 
%104:	ret	%103 

FUNCTION llvm.dbg.declare

FUNCTION llvm.frameaddress

FUNCTION _libsafe_save_ra_fp

BASIC BLOCK entry
%105:	alloca	XXX 
%106:	call	XXX XXX XXX XXX llvm.dbg.value 
%107:	call	XXX XXX XXX XXX llvm.dbg.value 
%108:	call	XXX XXX XXX XXX llvm.dbg.value 
%109:	call	XXX XXX XXX XXX llvm.dbg.value 
%110:	call	XXX XXX XXX XXX llvm.dbg.value 
%111:	call	XXX XXX XXX XXX llvm.dbg.value 
%112:	call	XXX XXX XXX llvm.dbg.declare 
%113:	load	dying 
%114:	icmp	%113 XXX 
%115:	br	%114 if.end if.then 

BASIC BLOCK if.then
%116:	br	return 

BASIC BLOCK if.end
%117:	bitcast	%105 
%118:	call	XXX XXX XXX XXX llvm.dbg.value 
%119:	call	XXX llvm.frameaddress 
%120:	store	%119 %105 
%121:	load	%105 
%122:	icmp	%121 %117 
%123:	br	%122 if.end2 if.then1 

BASIC BLOCK if.then1
%124:	br	return 

BASIC BLOCK if.end2
%125:	bitcast	%105 
%126:	icmp	%125 XXX 
%127:	br	%126 cond.false cond.true 

BASIC BLOCK cond.true
%128:	br	cond.end7 

BASIC BLOCK cond.false
%129:	bitcast	%105 
%130:	icmp	%129 XXX 
%131:	br	%130 cond.false6 cond.true5 

BASIC BLOCK cond.true5
%132:	br	cond.end 

BASIC BLOCK cond.false6
%133:	bitcast	%105 
%134:	ptrtoint	%133 
%135:	and	%134 XXX 
%136:	add	%135 XXX 
%137:	inttoptr	%136 
%138:	br	cond.end 

BASIC BLOCK cond.end
%139:	phi	XXX %137 
%140:	br	cond.end7 

BASIC BLOCK cond.end7
%141:	phi	XXX %139 
%142:	call	XXX XXX XXX XXX llvm.dbg.value 
%143:	br	while.cond 

BASIC BLOCK while.cond
%144:	phi	XXX %165 
%145:	phi	ra_array %158 
%146:	phi	fp_array %162 
%147:	load	%105 
%148:	icmp	%147 %141 
%149:	br	%148 while.end while.body 

BASIC BLOCK while.body
%150:	add	%144 XXX 
%151:	icmp	%150 maxcount 
%152:	br	%151 if.end13 if.then12 

BASIC BLOCK if.then12
%153:	br	return 

BASIC BLOCK if.end13
%154:	load	%105 
%155:	getelementptr	%154 XXX 
%156:	bitcast	%155 
%157:	load	%156 
%158:	getelementptr	%145 XXX 
%159:	call	XXX XXX XXX XXX llvm.dbg.value 
%160:	store	%157 %145 
%161:	load	%105 
%162:	getelementptr	%146 XXX 
%163:	call	XXX XXX XXX XXX llvm.dbg.value 
%164:	store	%161 %146 
%165:	add	%144 XXX 
%166:	call	XXX XXX XXX XXX llvm.dbg.value 
%167:	load	%105 
%168:	bitcast	%167 
%169:	load	%168 
%170:	call	XXX XXX XXX XXX llvm.dbg.value 
%171:	icmp	%169 XXX 
%172:	br	%171 if.end17 if.then16 

BASIC BLOCK if.then16
%173:	br	return 

BASIC BLOCK if.end17
%174:	ptrtoint	%169 
%175:	and	%174 XXX 
%176:	icmp	%175 XXX 
%177:	br	%176 if.end21 if.then20 

BASIC BLOCK if.then20
%178:	store	XXX _libsafe_exclude 
%179:	br	return 

BASIC BLOCK if.end21
%180:	load	%105 
%181:	icmp	%169 %180 
%182:	br	%181 if.end24 if.then23 

BASIC BLOCK if.then23
%183:	store	XXX _libsafe_exclude 
%184:	br	return 

BASIC BLOCK if.end24
%185:	store	%169 %105 
%186:	br	while.cond 

BASIC BLOCK while.end
%187:	br	return 

BASIC BLOCK return
%188:	phi	XXX XXX XXX %165 XXX XXX XXX 
%189:	ret	%188 

FUNCTION _libsafe_verify_ra_fp

BASIC BLOCK entry
%190:	alloca	XXX 
%191:	call	XXX XXX XXX XXX llvm.dbg.value 
%192:	call	XXX XXX XXX XXX llvm.dbg.value 
%193:	call	XXX XXX XXX XXX llvm.dbg.value 
%194:	call	XXX XXX XXX XXX llvm.dbg.value 
%195:	call	XXX XXX XXX XXX llvm.dbg.value 
%196:	call	XXX XXX XXX XXX llvm.dbg.value 
%197:	call	XXX XXX XXX llvm.dbg.declare 
%198:	load	dying 
%199:	icmp	%198 XXX 
%200:	br	%199 if.end if.then 

BASIC BLOCK if.then
%201:	br	return 

BASIC BLOCK if.end
%202:	bitcast	%190 
%203:	call	XXX XXX XXX XXX llvm.dbg.value 
%204:	call	XXX llvm.frameaddress 
%205:	store	%204 %190 
%206:	load	%190 
%207:	icmp	%206 %202 
%208:	br	%207 if.end2 if.then1 

BASIC BLOCK if.then1
%209:	br	return 

BASIC BLOCK if.end2
%210:	bitcast	%190 
%211:	icmp	%210 XXX 
%212:	br	%211 cond.false cond.true 

BASIC BLOCK cond.true
%213:	br	cond.end7 

BASIC BLOCK cond.false
%214:	bitcast	%190 
%215:	icmp	%214 XXX 
%216:	br	%215 cond.false6 cond.true5 

BASIC BLOCK cond.true5
%217:	br	cond.end 

BASIC BLOCK cond.false6
%218:	bitcast	%190 
%219:	ptrtoint	%218 
%220:	and	%219 XXX 
%221:	add	%220 XXX 
%222:	inttoptr	%221 
%223:	br	cond.end 

BASIC BLOCK cond.end
%224:	phi	XXX %222 
%225:	br	cond.end7 

BASIC BLOCK cond.end7
%226:	phi	XXX %224 
%227:	call	XXX XXX XXX XXX llvm.dbg.value 
%228:	br	while.cond 

BASIC BLOCK while.cond
%229:	phi	XXX %250 
%230:	phi	ra_array %235 
%231:	phi	fp_array %244 
%232:	load	%190 
%233:	icmp	%232 %226 
%234:	br	%233 while.end while.body 

BASIC BLOCK while.body
%235:	getelementptr	%230 XXX 
%236:	call	XXX XXX XXX XXX llvm.dbg.value 
%237:	load	%230 
%238:	load	%190 
%239:	getelementptr	%238 XXX 
%240:	bitcast	%239 
%241:	load	%240 
%242:	icmp	%237 %241 
%243:	br	%242 lor.lhs.false if.then15 

BASIC BLOCK lor.lhs.false
%244:	getelementptr	%231 XXX 
%245:	call	XXX XXX XXX XXX llvm.dbg.value 
%246:	load	%231 
%247:	load	%190 
%248:	icmp	%246 %247 
%249:	br	%248 lor.lhs.false13 if.then15 

BASIC BLOCK lor.lhs.false13
%250:	add	%229 XXX 
%251:	call	XXX XXX XXX XXX llvm.dbg.value 
%252:	icmp	%229 maxcount 
%253:	br	%252 if.end20 if.then15 

BASIC BLOCK if.then15
%254:	phi	%229 %229 %250 
%255:	br	for.cond 

BASIC BLOCK for.cond
%256:	phi	%254 %271 
%257:	icmp	%256 maxcount 
%258:	br	%257 for.end for.body 

BASIC BLOCK for.body
%259:	getelementptr	ra_array %256 
%260:	load	%259 
%261:	load	%190 
%262:	getelementptr	%261 XXX 
%263:	bitcast	%262 
%264:	store	%260 %263 
%265:	getelementptr	fp_array %256 
%266:	load	%265 
%267:	load	%190 
%268:	bitcast	%267 
%269:	store	%266 %268 
%270:	br	for.inc 

BASIC BLOCK for.inc
%271:	add	%256 XXX 
%272:	call	XXX XXX XXX XXX llvm.dbg.value 
%273:	br	for.cond 

BASIC BLOCK for.end
%274:	br	return 

BASIC BLOCK if.end20
%275:	load	%190 
%276:	bitcast	%275 
%277:	load	%276 
%278:	call	XXX XXX XXX XXX llvm.dbg.value 
%279:	icmp	%277 XXX 
%280:	br	%279 if.end23 if.then22 

BASIC BLOCK if.then22
%281:	br	return 

BASIC BLOCK if.end23
%282:	store	%277 %190 
%283:	br	while.cond 

BASIC BLOCK while.end
%284:	br	return 

BASIC BLOCK return
%285:	phi	XXX XXX XXX XXX XXX 
%286:	ret	%285 

FUNCTION _libsafe_raVariableP

BASIC BLOCK entry
%287:	alloca	XXX 
%288:	call	XXX XXX XXX XXX llvm.dbg.value 
%289:	call	XXX XXX XXX XXX llvm.dbg.value 
%290:	call	XXX XXX XXX llvm.dbg.declare 
%291:	load	dying 
%292:	icmp	%291 XXX 
%293:	br	%292 if.end if.then 

BASIC BLOCK if.then
%294:	br	return 

BASIC BLOCK if.end
%295:	bitcast	%287 
%296:	call	XXX XXX XXX XXX llvm.dbg.value 
%297:	icmp	%295 addr 
%298:	br	%297 if.end2 if.then1 

BASIC BLOCK if.then1
%299:	br	return 

BASIC BLOCK if.end2
%300:	call	XXX llvm.frameaddress 
%301:	store	%300 %287 
%302:	bitcast	%287 
%303:	icmp	%302 XXX 
%304:	br	%303 cond.false cond.true 

BASIC BLOCK cond.true
%305:	br	cond.end7 

BASIC BLOCK cond.false
%306:	bitcast	%287 
%307:	icmp	%306 XXX 
%308:	br	%307 cond.false6 cond.true5 

BASIC BLOCK cond.true5
%309:	br	cond.end 

BASIC BLOCK cond.false6
%310:	bitcast	%287 
%311:	ptrtoint	%310 
%312:	and	%311 XXX 
%313:	add	%312 XXX 
%314:	inttoptr	%313 
%315:	br	cond.end 

BASIC BLOCK cond.end
%316:	phi	XXX %314 
%317:	br	cond.end7 

BASIC BLOCK cond.end7
%318:	phi	XXX %316 
%319:	call	XXX XXX XXX XXX llvm.dbg.value 
%320:	br	while.cond 

BASIC BLOCK while.cond
%321:	load	%287 
%322:	icmp	%295 %321 
%323:	br	%322 land.end land.rhs 

BASIC BLOCK land.rhs
%324:	load	%287 
%325:	icmp	%324 %318 
%326:	br	land.end 

BASIC BLOCK land.end
%327:	phi	XXX %325 
%328:	br	%327 while.end while.body 

BASIC BLOCK while.body
%329:	load	%287 
%330:	icmp	%329 addr 
%331:	br	%330 lor.lhs.false if.then13 

BASIC BLOCK lor.lhs.false
%332:	load	%287 
%333:	getelementptr	%332 XXX 
%334:	icmp	%333 addr 
%335:	br	%334 if.end14 if.then13 

BASIC BLOCK if.then13
%336:	call	XXX XXX XXX XXX llvm.dbg.value 
%337:	br	while.end 

BASIC BLOCK if.end14
%338:	load	%287 
%339:	bitcast	%338 
%340:	load	%339 
%341:	call	XXX XXX XXX XXX llvm.dbg.value 
%342:	ptrtoint	%340 
%343:	and	%342 XXX 
%344:	icmp	%343 XXX 
%345:	br	%344 if.end18 if.then17 

BASIC BLOCK if.then17
%346:	br	return 

BASIC BLOCK if.end18
%347:	load	%287 
%348:	icmp	%340 %347 
%349:	br	%348 if.end21 if.then20 

BASIC BLOCK if.then20
%350:	br	return 

BASIC BLOCK if.end21
%351:	store	%340 %287 
%352:	br	while.cond 

BASIC BLOCK while.end
%353:	phi	XXX XXX 
%354:	icmp	%353 XXX 
%355:	br	%354 if.end24 if.then23 

BASIC BLOCK if.then23
%356:	br	return 

BASIC BLOCK if.end24
%357:	br	while.cond25 

BASIC BLOCK while.cond25
%358:	load	%287 
%359:	icmp	%295 %358 
%360:	br	%359 land.end29 land.rhs27 

BASIC BLOCK land.rhs27
%361:	load	%287 
%362:	icmp	%361 %318 
%363:	br	land.end29 

BASIC BLOCK land.end29
%364:	phi	XXX %362 
%365:	br	%364 while.end41 while.body30 

BASIC BLOCK while.body30
%366:	load	%287 
%367:	bitcast	%366 
%368:	load	%367 
%369:	call	XXX XXX XXX XXX llvm.dbg.value 
%370:	icmp	%368 XXX 
%371:	br	%370 if.end33 if.then32 

BASIC BLOCK if.then32
%372:	br	return 

BASIC BLOCK if.end33
%373:	ptrtoint	%368 
%374:	and	%373 XXX 
%375:	icmp	%374 XXX 
%376:	br	%375 if.end37 if.then36 

BASIC BLOCK if.then36
%377:	br	return 

BASIC BLOCK if.end37
%378:	load	%287 
%379:	icmp	%368 %378 
%380:	br	%379 if.end40 if.then39 

BASIC BLOCK if.then39
%381:	br	return 

BASIC BLOCK if.end40
%382:	store	%368 %287 
%383:	br	while.cond25 

BASIC BLOCK while.end41
%384:	br	return 

BASIC BLOCK return
%385:	phi	XXX XXX XXX %353 XXX XXX XXX XXX XXX 
%386:	ret	%385 

FUNCTION _libsafe_warn

BASIC BLOCK entry
%387:	alloca	XXX 
%388:	alloca	XXX 
%389:	alloca	XXX 
%390:	call	XXX XXX XXX XXX llvm.dbg.value 
%391:	call	XXX XXX XXX llvm.dbg.declare 
%392:	call	XXX XXX XXX llvm.dbg.declare 
%393:	call	XXX XXX XXX llvm.dbg.declare 
%394:	store	XXX dying 
%395:	getelementptr	%387 XXX XXX 
%396:	call	%395 XXX get_exename 
%397:	bitcast	%388 
%398:	call	%397 llvm.va_start 
%399:	call	%389 get_memory_maps 
%400:	call	XXX XXX XXX XXX llvm.dbg.value 
%401:	call	XXX XXX XXX openlog 
%402:	call	XXX XXX XXX syslog 
%403:	call	XXX XXX syslog 
%404:	getelementptr	%387 XXX XXX 
%405:	call	XXX XXX %404 syslog 
%406:	call	getuid 
%407:	call	geteuid 
%408:	call	getpid 
%409:	call	XXX XXX %406 %407 %408 syslog 
%410:	load	stderr 
%411:	call	%410 XXX XXX fprintf 
%412:	load	stderr 
%413:	call	%412 XXX fprintf 
%414:	load	stderr 
%415:	getelementptr	%387 XXX XXX 
%416:	call	%414 XXX %415 fprintf 
%417:	load	stderr 
%418:	call	getuid 
%419:	call	geteuid 
%420:	call	getpid 
%421:	call	%417 XXX %418 %419 %420 fprintf 
%422:	call	XXX XXX syslog 
%423:	load	stderr 
%424:	call	%423 XXX fprintf 
%425:	call	XXX llvm.frameaddress 
%426:	call	XXX XXX XXX XXX llvm.dbg.value 
%427:	br	for.cond 

BASIC BLOCK for.cond
%428:	phi	%425 %455 
%429:	load	%428 
%430:	icmp	%429 XXX 
%431:	br	%430 for.end for.body 

BASIC BLOCK for.body
%432:	getelementptr	%428 XXX 
%433:	bitcast	%432 
%434:	load	%433 
%435:	call	XXX XXX XXX XXX llvm.dbg.value 
%436:	ptrtoint	%434 
%437:	sub	%436 XXX 
%438:	inttoptr	%437 
%439:	call	XXX XXX XXX XXX llvm.dbg.value 
%440:	load	%389 
%441:	call	%440 %399 %438 find_caller_addr 
%442:	call	XXX XXX XXX XXX llvm.dbg.value 
%443:	load	%389 
%444:	getelementptr	%443 %441 
%445:	getelementptr	%444 XXX XXX 
%446:	load	%445 
%447:	call	XXX XXX %438 %446 syslog 
%448:	load	stderr 
%449:	load	%389 
%450:	getelementptr	%449 %441 
%451:	getelementptr	%450 XXX XXX 
%452:	load	%451 
%453:	call	%448 XXX %438 %452 fprintf 
%454:	bitcast	%428 
%455:	load	%454 
%456:	call	XXX XXX XXX XXX llvm.dbg.value 
%457:	call	%428 %455 check_nextfp 
%458:	icmp	%457 XXX 
%459:	br	%458 if.end if.then 

BASIC BLOCK if.then
%460:	br	for.end 

BASIC BLOCK if.end
%461:	br	for.inc 

BASIC BLOCK for.inc
%462:	call	XXX XXX XXX XXX llvm.dbg.value 
%463:	br	for.cond 

BASIC BLOCK for.end
%464:	load	%388 
%465:	call	XXX format %464 syslog 
%466:	load	stderr 
%467:	load	%388 
%468:	call	%466 format %467 vfprintf 
%469:	load	stderr 
%470:	call	%469 XXX fprintf 
%471:	bitcast	%388 
%472:	call	%471 llvm.va_end 
%473:	load	%389 
%474:	icmp	%473 XXX 
%475:	br	%474 if.end27 if.then26 

BASIC BLOCK if.then26
%476:	load	%389 
%477:	bitcast	%476 
%478:	call	%477 free 
%479:	br	if.end27 

BASIC BLOCK if.end27
%480:	store	XXX dying 
%481:	ret	

FUNCTION get_exename

BASIC BLOCK entry
%482:	call	XXX XXX XXX XXX llvm.dbg.value 
%483:	call	XXX XXX XXX XXX llvm.dbg.value 
%484:	sub	size XXX 
%485:	call	XXX exename %484 readlink 
%486:	call	XXX XXX XXX XXX llvm.dbg.value 
%487:	icmp	%485 XXX 
%488:	br	%487 if.else if.then 

BASIC BLOCK if.then
%489:	getelementptr	exename XXX 
%490:	store	XXX %489 
%491:	br	if.end 

BASIC BLOCK if.else
%492:	getelementptr	exename %485 
%493:	store	XXX %492 
%494:	br	if.end 

BASIC BLOCK if.end
%495:	ret	exename 

FUNCTION llvm.va_start

FUNCTION get_memory_maps

BASIC BLOCK entry
%496:	alloca	XXX 
%497:	alloca	XXX 
%498:	call	XXX XXX XXX XXX llvm.dbg.value 
%499:	call	XXX XXX XXX XXX llvm.dbg.value 
%500:	call	XXX XXX XXX llvm.dbg.declare 
%501:	call	XXX XXX XXX llvm.dbg.declare 
%502:	getelementptr	%496 XXX XXX 
%503:	call	getpid 
%504:	call	%502 XXX XXX %503 snprintf 
%505:	getelementptr	%496 XXX XXX 
%506:	call	%505 XXX fopen 
%507:	call	XXX XXX XXX XXX llvm.dbg.value 
%508:	icmp	%506 XXX 
%509:	br	%508 if.end if.then 

BASIC BLOCK if.then
%510:	br	return 

BASIC BLOCK if.end
%511:	call	XXX XXX XXX XXX llvm.dbg.value 
%512:	br	while.cond 

BASIC BLOCK while.cond
%513:	phi	XXX %518 
%514:	getelementptr	%497 XXX XXX 
%515:	call	%514 XXX %506 fgets 
%516:	icmp	%515 XXX 
%517:	br	%516 while.end while.body 

BASIC BLOCK while.body
%518:	add	%513 XXX 
%519:	call	XXX XXX XXX XXX llvm.dbg.value 
%520:	br	while.cond 

BASIC BLOCK while.end
%521:	call	%506 fclose 
%522:	mul	%513 XXX 
%523:	call	%522 malloc 
%524:	bitcast	%523 
%525:	call	XXX XXX XXX XXX llvm.dbg.value 
%526:	store	%524 mapsptr 
%527:	getelementptr	%496 XXX XXX 
%528:	call	%527 XXX fopen 
%529:	call	XXX XXX XXX XXX llvm.dbg.value 
%530:	icmp	%528 XXX 
%531:	br	%530 if.end15 if.then11 

BASIC BLOCK if.then11
%532:	icmp	%524 XXX 
%533:	br	%532 if.end14 if.then13 

BASIC BLOCK if.then13
%534:	bitcast	%524 
%535:	call	%534 free 
%536:	br	if.end14 

BASIC BLOCK if.end14
%537:	br	return 

BASIC BLOCK if.end15
%538:	call	XXX XXX XXX XXX llvm.dbg.value 
%539:	br	while.cond16 

BASIC BLOCK while.cond16
%540:	phi	XXX %578 
%541:	getelementptr	%497 XXX XXX 
%542:	call	%541 XXX %528 fgets 
%543:	icmp	%542 XXX 
%544:	br	%543 land.end land.rhs 

BASIC BLOCK land.rhs
%545:	icmp	%540 %513 
%546:	br	land.end 

BASIC BLOCK land.end
%547:	phi	XXX %545 
%548:	br	%547 while.end41 while.body21 

BASIC BLOCK while.body21
%549:	getelementptr	%497 XXX XXX 
%550:	getelementptr	%524 %540 
%551:	getelementptr	%550 XXX XXX 
%552:	getelementptr	%524 %540 
%553:	getelementptr	%552 XXX XXX 
%554:	call	%549 XXX %551 %553 __isoc99_sscanf 
%555:	getelementptr	%497 XXX XXX 
%556:	call	%555 XXX strchr 
%557:	call	XXX XXX XXX XXX llvm.dbg.value 
%558:	icmp	%556 XXX 
%559:	br	%558 if.else if.then28 

BASIC BLOCK if.then28
%560:	call	%556 strdup 
%561:	getelementptr	%524 %540 
%562:	getelementptr	%561 XXX XXX 
%563:	store	%560 %562 
%564:	getelementptr	%524 %540 
%565:	getelementptr	%564 XXX XXX 
%566:	load	%565 
%567:	call	%566 XXX strchr 
%568:	call	XXX XXX XXX XXX llvm.dbg.value 
%569:	icmp	%567 XXX 
%570:	br	%569 if.end36 if.then35 

BASIC BLOCK if.then35
%571:	store	XXX %567 
%572:	br	if.end36 

BASIC BLOCK if.end36
%573:	br	if.end39 

BASIC BLOCK if.else
%574:	getelementptr	%524 %540 
%575:	getelementptr	%574 XXX XXX 
%576:	store	XXX %575 
%577:	br	if.end39 

BASIC BLOCK if.end39
%578:	add	%540 XXX 
%579:	call	XXX XXX XXX XXX llvm.dbg.value 
%580:	br	while.cond16 

BASIC BLOCK while.end41
%581:	call	%528 fclose 
%582:	br	return 

BASIC BLOCK return
%583:	phi	XXX XXX %513 
%584:	ret	%583 

FUNCTION openlog

FUNCTION syslog

FUNCTION getuid

FUNCTION geteuid

FUNCTION getpid

FUNCTION fprintf

FUNCTION find_caller_addr

BASIC BLOCK entry
%585:	call	XXX XXX XXX XXX llvm.dbg.value 
%586:	call	XXX XXX XXX XXX llvm.dbg.value 
%587:	call	XXX XXX XXX XXX llvm.dbg.value 
%588:	call	XXX XXX XXX XXX llvm.dbg.value 
%589:	br	for.cond 

BASIC BLOCK for.cond
%590:	phi	XXX %605 
%591:	icmp	%590 count 
%592:	br	%591 for.end for.body 

BASIC BLOCK for.body
%593:	getelementptr	maps %590 
%594:	getelementptr	%593 XXX XXX 
%595:	load	%594 
%596:	icmp	caller_addr %595 
%597:	br	%596 if.end land.lhs.true 

BASIC BLOCK land.lhs.true
%598:	getelementptr	maps %590 
%599:	getelementptr	%598 XXX XXX 
%600:	load	%599 
%601:	icmp	caller_addr %600 
%602:	br	%601 if.end if.then 

BASIC BLOCK if.then
%603:	br	return 

BASIC BLOCK if.end
%604:	br	for.inc 

BASIC BLOCK for.inc
%605:	add	%590 XXX 
%606:	call	XXX XXX XXX XXX llvm.dbg.value 
%607:	br	for.cond 

BASIC BLOCK for.end
%608:	br	return 

BASIC BLOCK return
%609:	phi	%590 XXX 
%610:	ret	%609 

FUNCTION check_nextfp

BASIC BLOCK entry
%611:	alloca	XXX 
%612:	store	fp %611 
%613:	call	XXX XXX XXX llvm.dbg.declare 
%614:	call	XXX XXX XXX XXX llvm.dbg.value 
%615:	bitcast	%611 
%616:	icmp	%615 XXX 
%617:	br	%616 cond.false cond.true 

BASIC BLOCK cond.true
%618:	br	cond.end4 

BASIC BLOCK cond.false
%619:	bitcast	%611 
%620:	icmp	%619 XXX 
%621:	br	%620 cond.false3 cond.true2 

BASIC BLOCK cond.true2
%622:	br	cond.end 

BASIC BLOCK cond.false3
%623:	bitcast	%611 
%624:	ptrtoint	%623 
%625:	and	%624 XXX 
%626:	add	%625 XXX 
%627:	inttoptr	%626 
%628:	br	cond.end 

BASIC BLOCK cond.end
%629:	phi	XXX %627 
%630:	br	cond.end4 

BASIC BLOCK cond.end4
%631:	phi	XXX %629 
%632:	call	XXX XXX XXX XXX llvm.dbg.value 
%633:	icmp	nextfp %631 
%634:	br	%633 if.end if.then 

BASIC BLOCK if.then
%635:	store	XXX _libsafe_exclude 
%636:	br	return 

BASIC BLOCK if.end
%637:	ptrtoint	nextfp 
%638:	and	%637 XXX 
%639:	icmp	%638 XXX 
%640:	br	%639 if.end9 if.then8 

BASIC BLOCK if.then8
%641:	store	XXX _libsafe_exclude 
%642:	br	return 

BASIC BLOCK if.end9
%643:	load	%611 
%644:	icmp	nextfp %643 
%645:	br	%644 if.end12 if.then11 

BASIC BLOCK if.then11
%646:	store	XXX _libsafe_exclude 
%647:	br	return 

BASIC BLOCK if.end12
%648:	br	return 

BASIC BLOCK return
%649:	phi	XXX XXX XXX XXX 
%650:	ret	%649 

FUNCTION vfprintf

FUNCTION llvm.va_end

FUNCTION free

FUNCTION _libsafe_die

BASIC BLOCK entry
%651:	alloca	XXX 
%652:	call	XXX XXX XXX XXX llvm.dbg.value 
%653:	call	XXX XXX XXX llvm.dbg.declare 
%654:	store	XXX dying 
%655:	bitcast	%651 
%656:	call	%655 llvm.va_start 
%657:	load	%651 
%658:	call	format %657 _libsafe_warn 
%659:	bitcast	%651 
%660:	call	%659 llvm.va_end 
%661:	call	XXX raise 
%662:	ret	

FUNCTION raise

FUNCTION snprintf

FUNCTION fopen

FUNCTION fgets

FUNCTION fclose

FUNCTION malloc

FUNCTION __isoc99_sscanf

FUNCTION strchr

FUNCTION strdup

FUNCTION readlink

FUNCTION llvm.dbg.value
------------- Part 1 Result ----------------
[ 23 ]
------------- Part 2 Result ----------------
[ ]
------------- Part 3 Result ----------------
[ ]
