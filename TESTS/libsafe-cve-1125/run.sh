#!/bin/bash

# This script combines our front end & back end together to analyze vulnerable data races.
# Before running this script, we're assuming you've already build our project using CMake.

BUILD_DIRECTORY=$CONANAL_ROOT/build

# Step 1: You *must* build our project using CMake before running this script.
# Create a folder named build in the top level source code folder.
if [ -d "$BUILD_DIRECTORY" ]
then
    echo "Seems you've built our project, very good!"
else
    echo "Error: Build ConAnalysis using CMake before running this script!"
    exit 1
fi

# Step 2: We'll run valgrind to detect race during this step.
if [ $CONANAL_ROOT = '' ]
then
    echo "Error: Please set CONANAL_ROOT in your enviroment!"
    exit 1
fi

cd $CONANAL_ROOT/concurrency-exploits/libsafe-CVE-2005-1125
if [ $? -ne 0 ]
then
    echo "Error: Couldn't enter submodule concurrency-exploits."
    echo "Did you forget to \"git submodule update --init --recursive\""
    exit 1
fi

if [ -f "libsafe-2.0-16/src/libsafe.so.2.0.16" ] 
then
    echo "Seems you've built libsafe already, very good!"
else
    echo "Error: You need to build libsafe before running this script."
    echo "You can use mk.sh to automatically build it."
fi

valgrind --version
if [ $? -ne 0 ]
then
    echo "Error: Please install valgrind before running this script."
    echo "We strongly recommend using valgrind 3.11."
fi

valgrind --tool=helgrind --trace-children=yes --read-var-info=yes ./wrapper.sh 2>| $CONANAL_ROOT/TESTS/libsafe-cve-1125/valgrind_latest.out

if [ $? -eq 0 ]
then 
    echo "Data race report successfully generated by valgrind!"
else
    echo "Error: Something wrong with valgrind. Couldn't generate race report!"
fi
